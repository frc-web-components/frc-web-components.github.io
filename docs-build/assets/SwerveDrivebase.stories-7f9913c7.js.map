{"version":3,"file":"SwerveDrivebase.stories-7f9913c7.js","sources":["../../node_modules/@lit/reactive-element/decorators/base.js","../../node_modules/@lit/reactive-element/decorators/query.js","../../src/elements/base/drivebases/swerve.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e=(e,t,o)=>{Object.defineProperty(t,o,e)},t=(e,t)=>({kind:\"method\",placement:\"prototype\",key:t.key,descriptor:e}),o=({finisher:e,descriptor:t})=>(o,n)=>{var r;if(void 0===n){const n=null!==(r=o.originalKey)&&void 0!==r?r:o.key,i=null!=t?{kind:\"method\",placement:\"prototype\",key:n,descriptor:t(o.key)}:{...o,key:n};return null!=e&&(i.finisher=function(t){e(t,n)}),i}{const r=o.constructor;void 0!==t&&Object.defineProperty(o,n,t(n)),null==e||e(r,n)}};export{o as decorateProperty,e as legacyPrototypeMethod,t as standardPrototypeMethod};\n//# sourceMappingURL=base.js.map\n","import{decorateProperty as o}from\"./base.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */function i(i,n){return o({descriptor:o=>{const t={get(){var o,n;return null!==(n=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(i))&&void 0!==n?n:null},enumerable:!0,configurable:!0};if(n){const n=\"symbol\"==typeof o?Symbol():\"__\"+o;t.get=function(){var o,t;return void 0===this[n]&&(this[n]=null!==(t=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(i))&&void 0!==t?t:null),this[n]}}return t}})}export{i as query};\n//# sourceMappingURL=query.js.map\n","/* eslint-disable no-underscore-dangle */\nimport { svg, css, LitElement, TemplateResult } from 'lit';\nimport { customElement, property, query } from 'lit/decorators.js';\nimport * as d3 from 'd3';\n\ninterface SwerveModule {\n  location: [number, number];\n  desiredRotation: number;\n  desiredVelocity: number;\n  measuredRotation: number;\n  measuredVelocity: number;\n}\n\nfunction hasChangedProp(\n  changedProps: Map<string, unknown>,\n  ...props: string[]\n) {\n  return props.some((prop) => changedProps.has(prop));\n}\n\nfunction deg2Rad(deg: number): number {\n  return (deg * Math.PI) / 180;\n}\n\nfunction rad2Deg(rad: number): number {\n  return (rad * 180) / Math.PI;\n}\n\nfunction bound(value: number, min: number, max: number): number {\n  return Math.max(Math.min(value, max), min);\n}\n\n/**\n *\n * @param angleDeg - top is 0, increases cw. Should be converted to right 0, increases ccw.\n * @returns\n */\nfunction getUnitCircleCords(\n  angleDeg: number,\n  counterClockwise = false\n): [number, number] {\n  const unitAngle = deg2Rad(-(angleDeg - 90));\n  const x = counterClockwise ? -Math.cos(unitAngle) : Math.cos(unitAngle);\n  return [x, Math.sin(unitAngle)];\n}\n\n@customElement('frc-swerve-drivebase')\nexport default class Swerve extends LitElement {\n  @property({ type: Number, attribute: 'module-count' }) moduleCount = 4;\n  @property({ type: Array, attribute: 'wheel-locations' }) wheelLocations = [\n    2.5, 2, 2.5, -2, -2.5, 2, -2.5, -2,\n  ];\n  @property({ type: Array, attribute: 'measured-states' }) measuredStates = [\n    0, 0, 0, 0, 0, 0, 0, 0,\n  ];\n  @property({ type: Array, attribute: 'desired-states' }) desiredStates = [\n    0, 0, 0, 0, 0, 0, 0, 0,\n  ];\n  @property({ type: Number, attribute: 'robot-rotation' }) robotRotation = 0;\n\n  @property({ type: Number, attribute: 'max-speed' }) maxSpeed = 1;\n  @property({ type: String, attribute: 'rotation-unit' }) rotationUnit =\n    'radians';\n\n  @property({ type: Number, attribute: 'size-left-right' }) sizeLeftRight = 4;\n  @property({ type: Number, attribute: 'size-front-back' }) sizeFrontBack = 5;\n\n  private normalizedRotation = 0;\n\n  // @property({ type: String, attribute: 'forward-direction' }) forwardDirection =\n  //   'up';\n  // @property({ type: Number, attribute: 'max-angular-velocity' })\n  // maxAngularVelocity = Math.PI * 2;\n  // @property({ type: Array, attribute: 'measured-chassis-speeds' })\n  // measuredChassisSpeeds: number[] = [];\n  // @property({ type: Array, attribute: 'desired-chassis-speeds' })\n  // desiredChassisSpeeds: number[] = [];\n\n  @query('svg') _svg!: SVGSVGElement;\n  @query('.swerve') _swerve!: SVGGElement;\n  @query('.base') _base!: SVGRectElement;\n  @query('.modules') _modules!: SVGGElement;\n\n  static styles = css`\n    :host {\n      display: inline-block;\n      width: 300px;\n      height: auto;\n      overflow: visible;\n    }\n\n    svg {\n      width: 100%;\n      overflow: visible;\n    }\n\n    .base {\n      stroke: var(--frc-swerve-drive-color, black);\n    }\n\n    .arrow {\n      stroke: var(--frc-swerve-drive-color, black);\n    }\n\n    .module-circle {\n      stroke: var(--frc-swerve-drive-color, black);\n    }\n  `;\n\n  drawBase(): void {\n    const [width, height] = this.getBaseSize();\n    d3.select(this._base)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('stroke-width', 5)\n      .attr('fill', 'none');\n  }\n\n  setSwerveRotation(): void {\n    d3.select(this._swerve).attr(\n      'transform',\n      `rotate(${-this.normalizedRotation})`\n    );\n  }\n\n  setSwerveOrigin(): void {\n    const [width, height] = this.getBaseSize();\n    d3.select(this._swerve).attr(\n      'transform-origin',\n      `${width / 2} ${height / 2}`\n    );\n  }\n\n  getRobotRotationRad(): number {\n    const rotation = this.robotRotation;\n    return this.rotationUnit === 'radians' ? rotation : deg2Rad(rotation);\n  }\n\n  getSvgSize(): [number, number] {\n    const { width } = this.getBoundingClientRect();\n    return [width, (width * this.sizeFrontBack) / this.sizeLeftRight];\n  }\n\n  getBaseSize(): [number, number] {\n    const [width] = this.getSvgSize();\n    return [width, (width * this.sizeFrontBack) / this.sizeLeftRight];\n  }\n\n  updated(changedProps: Map<string, unknown>): void {\n    if (changedProps.has('robotRotation')) {\n      const robotRotation = this.robotRotation ?? 0;\n      const prevRobotRotation =\n        (changedProps.get('robotRotation') as number) ?? robotRotation;\n      const rotationChange = prevRobotRotation - robotRotation;\n      const rotationChangeDeg =\n        this.rotationUnit === 'degrees'\n          ? rotationChange\n          : rad2Deg(rotationChange);\n      const normalizedChange = [\n        rotationChangeDeg - 720,\n        rotationChangeDeg - 360,\n        rotationChangeDeg,\n        rotationChangeDeg + 360,\n        rotationChangeDeg + 720,\n      ];\n      let minIndex = 0;\n      let minDiff = Math.abs(normalizedChange[0]);\n      for (let i = 1; i < normalizedChange.length; i += 1) {\n        const diff = Math.abs(normalizedChange[i]);\n        if (diff < minDiff) {\n          minIndex = i;\n          minDiff = diff;\n        }\n      }\n      this.normalizedRotation -= normalizedChange[minIndex];\n    }\n\n    if (\n      hasChangedProp(\n        changedProps,\n        'sizeLeftRight',\n        'sizeFrontBack',\n        'robotRotation',\n        'rotationUnit'\n      )\n    ) {\n      this.drawBase();\n    }\n\n    if (hasChangedProp(changedProps, 'robotRotation', 'rotationUnit')) {\n      this.setSwerveRotation();\n    }\n\n    if (hasChangedProp(changedProps, 'sizeLeftRight', 'sizeFrontBack')) {\n      this.setSwerveOrigin();\n    }\n  }\n\n  resized(): void {\n    const [width, height] = this.getSvgSize();\n\n    d3.select(this._svg).attr('width', width).attr('height', height);\n\n    this.drawBase();\n    this.setSwerveOrigin();\n    this.requestUpdate();\n  }\n\n  firstUpdated(): void {\n    const resizeObserver = new ResizeObserver(() => {\n      this.resized();\n    });\n    resizeObserver.observe(this);\n    this.resized();\n  }\n\n  getSwerveModules(): SwerveModule[] {\n    const modules: SwerveModule[] = [];\n    for (let i = 0; i < this.moduleCount; i += 1) {\n      const location: [number, number] = [\n        this.wheelLocations[i * 2],\n        this.wheelLocations[i * 2 + 1],\n      ];\n      const module: SwerveModule = {\n        location,\n        desiredRotation: this.desiredStates[i * 2],\n        desiredVelocity: this.desiredStates[i * 2 + 1],\n        measuredRotation: this.measuredStates[i * 2],\n        measuredVelocity: this.measuredStates[i * 2 + 1],\n      };\n      modules.push(module);\n    }\n    return modules;\n  }\n\n  renderModuleDirectionIndicator(\n    clipId: string,\n    desiredRotation: number,\n    color: string\n  ): TemplateResult {\n    const desiredRotDeg =\n      this.rotationUnit === 'degrees'\n        ? desiredRotation\n        : rad2Deg(desiredRotation);\n    const [x1, y1] = getUnitCircleCords(desiredRotDeg - 15, true);\n    const [x2, y2] = getUnitCircleCords(desiredRotDeg + 15, true);\n\n    const path = `M ${-x1 * 60},${y1 * 60} L 0,0 ${-x2 * 60},${y2 * 60}`;\n    return svg`\n      <defs>\n        <clipPath id=${clipId}>\n          <path d=${path} fill=\"white\" stroke=\"5\" stroke=\"white\" />\n        </clipPath>\n      </defs>\n      <circle r=\"47.5\" fill=${color} stroke-width=\"0\" clip-path=${`url(#${clipId})`}></circle>\n    `;\n  }\n\n  renderModuleVelocityIndicator(\n    id: string,\n    rotation: number,\n    velocity: number,\n    color: string\n  ): TemplateResult {\n    const rotationDeg =\n      this.rotationUnit === 'degrees' ? rotation : rad2Deg(rotation);\n\n    let arrowLength = bound((100 * velocity) / this.maxSpeed, -100, 100);\n    arrowLength += 50 * Math.sign(arrowLength);\n    arrowLength *= -1;\n\n    const y1 = Math.abs(arrowLength) - 20;\n    const y2 = Math.abs(arrowLength);\n    const arrowHeadPath = `M -17.5,${y1} L 2.5,${y2} L 22.5,${y1}`;\n\n    const transform = `rotate(${-rotationDeg + (arrowLength < 0 ? 180 : 0)})`;\n    const maskId = `${id}-velocity`;\n    return svg`\n     <defs>\n        <mask id=${maskId}>\n          <circle r=\"300\" fill=\"white\" ></circle>\n          <circle r=\"52.5\" fill=\"black\" ></circle>\n        </mask>\n      </defs>\n      <g class=\"velocity-indicator\" transform=${transform} mask=\"url(#${maskId})\">\n        <rect width=\"5\" height=${Math.abs(arrowLength)} fill=${color}></rect>\n        <path d=${arrowHeadPath} stroke=${color} stroke-width=\"5\" fill=\"none\" />\n      </g>\n    `;\n  }\n\n  renderModules(): TemplateResult {\n    const modules = this.getSwerveModules();\n    const [baseWidth, baseHeight] = this.getBaseSize();\n    return svg`\n      <g class=\"modules\">\n        ${modules.map((module, index) => {\n          const {\n            desiredRotation,\n            measuredRotation,\n            location,\n            measuredVelocity,\n            desiredVelocity,\n          } = module;\n          const y =\n            baseHeight / 2 - (baseHeight * location[0]) / this.sizeFrontBack;\n          const x =\n            baseWidth / 2 - (baseWidth * location[1]) / this.sizeLeftRight;\n          const measuredClipId = `module-${index}-measured-clip`;\n          const desiredClipId = `module-${index}-desired-clip`;\n          return svg`\n            <g transform=${`translate(${x}, ${y})`}>\n              <circle class=\"module-circle\" r=\"50\" stroke-width=\"5\" fill=\"none\"></circle>\n              ${this.renderModuleDirectionIndicator(\n                measuredClipId,\n                measuredRotation,\n                'blue'\n              )}\n              ${this.renderModuleDirectionIndicator(\n                desiredClipId,\n                desiredRotation,\n                'red'\n              )}\n              ${this.renderModuleVelocityIndicator(\n                measuredClipId,\n                measuredRotation,\n                measuredVelocity,\n                'blue'\n              )}\n              ${this.renderModuleVelocityIndicator(\n                desiredClipId,\n                desiredRotation,\n                desiredVelocity,\n                'red'\n              )}\n            </g>\n          `;\n        })} \n      </g>\n    `;\n  }\n\n  renderWheelMask(): TemplateResult {\n    const modules = this.getSwerveModules();\n    const [baseWidth, baseHeight] = this.getBaseSize();\n\n    return svg`\n      <defs>\n        <mask id=\"wheel-mask\">\n          <rect fill=\"white\" width=${baseWidth} height=${baseHeight} stroke-width=\"5\" stroke=\"white\"></rect>\n          ${modules.map((module) => {\n            const y =\n              baseHeight / 2 -\n              (baseHeight * module.location[0]) / this.sizeFrontBack;\n            const x =\n              baseWidth / 2 -\n              (baseWidth * module.location[1]) / this.sizeLeftRight;\n\n            return svg`\n              <circle r=\"50\" fill=\"black\" transform=${`translate(${x}, ${y})`}></circle>\n            `;\n          })}\n        </mask>\n      </defs>\n    `;\n  }\n\n  renderArrow(): TemplateResult {\n    const [baseWidth, baseHeight] = this.getBaseSize();\n\n    const arrowHeadPath = `M ${baseWidth / 2 - 30},60 L ${baseWidth / 2},30 L ${\n      baseWidth / 2 + 30\n    },60`;\n    return svg`\n      <line class=\"arrow\" x1=${baseWidth / 2} y1=${30} x2=${baseWidth / 2} y2=${\n      baseHeight - 30\n    } stroke-width=\"5\" />\n      <path class=\"arrow\" d=${arrowHeadPath} stroke-width=\"5\" fill=\"none\" />\n      \n    `;\n  }\n\n  render(): TemplateResult {\n    return svg`\n      <div>\n        <svg>\n            ${this.renderWheelMask()}\n          <g class=\"swerve\">\n            <rect class=\"base\" mask=\"url(#wheel-mask)\"></rect>\n            ${this.renderModules()}\n            ${this.renderArrow()}\n          </g>\n        </svg>\n      </div>\n    `;\n  }\n}\n"],"names":["o","n","r","i","t","hasChangedProp","changedProps","props","prop","deg2Rad","deg","rad2Deg","rad","bound","value","min","max","getUnitCircleCords","angleDeg","counterClockwise","unitAngle","Swerve","LitElement","width","height","d3.select","rotation","robotRotation","rotationChange","rotationChangeDeg","normalizedChange","minIndex","minDiff","diff","modules","module","clipId","desiredRotation","color","desiredRotDeg","x1","y1","x2","y2","path","svg","id","velocity","rotationDeg","arrowLength","arrowHeadPath","transform","maskId","baseWidth","baseHeight","index","measuredRotation","location","measuredVelocity","desiredVelocity","y","x","measuredClipId","desiredClipId","css","__decorateClass","property","query","customElement"],"mappings":"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","x_google_ignoreList":[0,1]}