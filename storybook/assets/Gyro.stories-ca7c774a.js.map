{"version":3,"file":"Gyro.stories-ca7c774a.js","sources":["../../node_modules/d3-array/src/range.js","../../src/elements/base/gyro.ts"],"sourcesContent":["export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","/* eslint-disable no-underscore-dangle */\r\nimport { html, svg, css, LitElement, TemplateResult } from 'lit';\r\nimport { property, query } from 'lit/decorators.js';\r\n// TODO: We should only import the parts we need\r\nimport * as d3 from 'd3';\r\n\r\nfunction deg2Rad(deg: number): number {\r\n  return (deg * Math.PI) / 180;\r\n}\r\n\r\nfunction rad2Deg(rad: number): number {\r\n  return (rad * 180) / Math.PI;\r\n}\r\n\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.min(max, Math.max(value, min));\r\n}\r\n\r\n/**\r\n *\r\n * @param angleDeg - top is 0, increases cw. Should be converted to right 0, increases ccw.\r\n * @returns\r\n */\r\nfunction getUnitCircleCords(\r\n  angleDeg: number,\r\n  counterClockwise = false\r\n): [number, number] {\r\n  const unitAngle = deg2Rad(-(angleDeg - 90));\r\n  const x = counterClockwise ? -Math.cos(unitAngle) : Math.cos(unitAngle);\r\n  return [x, Math.sin(unitAngle)];\r\n}\r\n\r\nexport default class Gyro extends LitElement {\r\n  @property({ type: Number }) value = 0;\r\n  @property({ type: Boolean, attribute: 'hide-label' }) hideLabel = false;\r\n  @property({ type: Number }) precision = 2;\r\n  @property({ type: Boolean, attribute: 'counter-clockwise' })\r\n  counterClockwise = false;\r\n  @property({ type: Boolean, attribute: 'from-radians' }) fromRadians = false;\r\n\r\n  @query('svg') _svg!: SVGSVGElement;\r\n  @query('.dial') _dial!: SVGLineElement;\r\n  @query('.gyro') _gyro!: SVGGElement;\r\n  @query('.gyro-edge') _gyroEdge!: SVGCircleElement;\r\n  @query('.minor-ticks') _minorTicks!: SVGGElement;\r\n  @query('.major-ticks') _majorTicks!: SVGGElement;\r\n  @query('.labels') _labels!: SVGGElement;\r\n\r\n  static styles = css`\r\n    :host {\r\n      font-family: sans-serif;\r\n      display: inline-flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      position: relative;\r\n      width: 300px;\r\n      height: auto;\r\n    }\r\n\r\n    svg {\r\n      width: 100%;\r\n    }\r\n\r\n    label {\r\n      color: var(--frc-gyro-color, #000);\r\n      text-align: center;\r\n      display: block;\r\n      font-size: 16px;\r\n    }\r\n\r\n    .dial-circle {\r\n      fill: var(--frc-gyro-dial-color, blue);\r\n    }\r\n\r\n    .dial {\r\n      stroke: var(--frc-gyro-dial-color, blue);\r\n      stroke-width: 3;\r\n    }\r\n  `;\r\n\r\n  setLabels(): void {\r\n    const chartRadius = this.getGyroRadius();\r\n    d3.select(this._labels)\r\n      .selectAll('text')\r\n      .data([0, 45, 90, 135, 180, -135, -90, -45])\r\n      .join((enter) =>\r\n        enter\r\n          .append('text')\r\n          .attr('text-anchor', 'middle')\r\n          .attr('alignment-baseline', 'middle')\r\n          .attr('font-size', 15)\r\n          .attr('fill', 'var(--frc-gyro-color, #000)')\r\n          .text((angle) => `${angle}Â°`)\r\n      )\r\n      .attr(\r\n        'x',\r\n        (angle) =>\r\n          getUnitCircleCords(angle, this.counterClockwise)[0] *\r\n          (chartRadius + 30)\r\n      )\r\n      .attr(\r\n        'y',\r\n        (angle) =>\r\n          -getUnitCircleCords(angle, this.counterClockwise)[1] *\r\n          (chartRadius + 30)\r\n      );\r\n  }\r\n\r\n  setDialAngle(): void {\r\n    const chartRadius = this.getGyroRadius();\r\n    const angle = this.fromRadians ? rad2Deg(this.value) : this.value;\r\n    d3.select(this._dial)\r\n      .attr(\r\n        'x2',\r\n        getUnitCircleCords(angle, this.counterClockwise)[0] * (chartRadius - 7)\r\n      )\r\n      .attr(\r\n        'y2',\r\n        -getUnitCircleCords(angle, this.counterClockwise)[1] * (chartRadius - 7)\r\n      );\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  addTicks(\r\n    parent: SVGElement,\r\n    tickLength: number,\r\n    step: number,\r\n    strokeWidth: number\r\n  ): void {\r\n    const chartRadius = this.getGyroRadius();\r\n    d3.select(parent)\r\n      .selectAll('line')\r\n      .data(d3.range(0, 360, step))\r\n      .join((enter) =>\r\n        enter\r\n          .append('line')\r\n          .attr('stroke', 'var(--frc-gyro-color, #000)')\r\n          .attr('stroke-width', strokeWidth)\r\n      )\r\n      .attr('x1', (angle) => getUnitCircleCords(angle)[0] * chartRadius)\r\n      .attr('y1', (angle) => -getUnitCircleCords(angle)[1] * chartRadius)\r\n      .attr(\r\n        'x2',\r\n        (angle) => getUnitCircleCords(angle)[0] * (chartRadius + tickLength)\r\n      )\r\n      .attr(\r\n        'y2',\r\n        (angle) => -getUnitCircleCords(angle)[1] * (chartRadius + tickLength)\r\n      );\r\n  }\r\n\r\n  firstUpdated(): void {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      this.resized();\r\n    });\r\n    resizeObserver.observe(this);\r\n    this.resized();\r\n  }\r\n\r\n  resized(): void {\r\n    const size = this.getSize();\r\n    d3.select(this._svg).attr('width', size).attr('height', size);\r\n\r\n    d3.select(this._gyro).attr(\r\n      'transform',\r\n      `translate(${size / 2},${size / 2})`\r\n    );\r\n\r\n    const chartRadius = this.getGyroRadius();\r\n\r\n    d3.select(this._gyroEdge).attr('r', chartRadius);\r\n\r\n    this.addTicks(this._minorTicks, 5, 5, 1);\r\n    this.addTicks(this._majorTicks, 10, 45, 2);\r\n    this.setLabels();\r\n    this.setDialAngle();\r\n  }\r\n\r\n  getSize(): number {\r\n    const { width } = this.getBoundingClientRect();\r\n    return width;\r\n  }\r\n\r\n  getGyroRadius(): number {\r\n    return this.getSize() / 2 - 53;\r\n  }\r\n\r\n  updated(changedProps: Map<string, unknown>): void {\r\n    if (\r\n      changedProps.has('value') ||\r\n      changedProps.has('fromRadians') ||\r\n      changedProps.has('counterClockwise')\r\n    ) {\r\n      this.setDialAngle();\r\n    }\r\n\r\n    if (changedProps.has('counterClockwise')) {\r\n      this.setLabels();\r\n    }\r\n  }\r\n\r\n  render(): TemplateResult {\r\n    const angle = this.fromRadians ? rad2Deg(this.value) : this.value;\r\n    const label = `${angle.toFixed(clamp(this.precision, 0, 100))}`;\r\n    return svg`\r\n        <div>\r\n        <svg>\r\n          <g class=\"gyro\">\r\n            <circle class=\"gyro-edge\" stroke-width=\"2\" stroke=\"var(--frc-gyro-color, #000)\" style=\"fill: none\"></circle>\r\n            <g class=\"minor-ticks\"></g>\r\n            <g class=\"major-ticks\"></g>\r\n            <g class=\"labels\"></g>\r\n            <circle class=\"dial-circle\" r=\"9\"></circle>\r\n            <line class=\"dial\" x1=\"0\" x2=\"0\"></line>\r\n          </g>\r\n        </svg>\r\n        ${!this.hideLabel ? html`<label>${label}&deg</label> ` : null}\r\n        </div>\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-gyro')) {\r\n  customElements.define('frc-gyro', Gyro);\r\n}\r\n"],"names":["range","start","stop","step","n","i","deg2Rad","deg","rad2Deg","rad","clamp","value","min","max","getUnitCircleCords","angleDeg","counterClockwise","unitAngle","Gyro","LitElement","chartRadius","d3.select","enter","angle","parent","tickLength","strokeWidth","d3.range","size","width","changedProps","label","svg","html","css","__decorateClass","property","query"],"mappings":"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","x_google_ignoreList":[0]}