{"version":3,"file":"Field.stories-9cc9845c.js","sources":["../../src/components/field/field-configs.ts","../../src/components/field/field-images.ts","../../src/components/field/field-robot.ts","../../src/components/field/field-path.ts","../../src/components/field/field.ts"],"sourcesContent":["export interface FieldConfig {\r\n  game: string;\r\n  image: string;\r\n  corners: {\r\n    topLeft: [number, number];\r\n    bottomRight: [number, number];\r\n  };\r\n  size: [number, number];\r\n  unit: string;\r\n}\r\n\r\nconst configs: FieldConfig[] = [\r\n  {\r\n    game: 'Charged Up',\r\n    image: './field-images/2023-field.jpg',\r\n    corners: {\r\n      topLeft: [46, 36],\r\n      bottomRight: [1088, 544],\r\n    },\r\n    size: [54.27083, 26.2916],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'Rapid React',\r\n    image: './field-images/2022-field.jpg',\r\n    corners: {\r\n      topLeft: [74, 50],\r\n      bottomRight: [1774, 900],\r\n    },\r\n    size: [54, 27],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'Infinite Recharge',\r\n    image: './field-images/2020-field.jpg',\r\n    corners: {\r\n      topLeft: [96, 25],\r\n      bottomRight: [1040, 514],\r\n    },\r\n    size: [52.4375, 26.9375],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'Destination: Deep Space',\r\n    image: './field-images/2019-field.jpg',\r\n    corners: {\r\n      topLeft: [217, 40],\r\n      bottomRight: [1372, 615],\r\n    },\r\n    size: [54, 27],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'FIRST Power Up',\r\n    image: './field-images/2018-field.jpg',\r\n    corners: {\r\n      topLeft: [125, 20],\r\n      bottomRight: [827, 370],\r\n    },\r\n    size: [54, 27],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Barrel Racing Path',\r\n    image: './field-images/2021-barrel.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Bounce Path',\r\n    image: './field-images/2021-bounce.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Galactic Search A',\r\n    image: './field-images/2021-galacticsearcha.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Galactic Search B',\r\n    image: './field-images/2021-galacticsearchb.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Slalom Path',\r\n    image: './field-images/2021-slalom.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n];\r\n\r\nexport default configs;\r\n","type Dims = { width: number; height: number };\r\n\r\nexport interface ImageObject extends Dims {\r\n  src: string;\r\n  loaded: boolean;\r\n  image: HTMLImageElement;\r\n}\r\n\r\nexport default class FieldImages {\r\n  #images: Record<string, ImageObject> = {};\r\n  #onImageLoadCallbacks: Map<symbol, (src: string) => unknown> = new Map();\r\n\r\n  getImage(src: string): ImageObject {\r\n    if (typeof this.#images[src] === 'undefined') {\r\n      const image = new Image();\r\n      const imageObject = {\r\n        src,\r\n        width: 0,\r\n        height: 0,\r\n        loaded: false,\r\n        image,\r\n      };\r\n      image.onload = () => {\r\n        imageObject.loaded = true;\r\n        imageObject.width = image.width;\r\n        imageObject.height = image.height;\r\n        [...this.#onImageLoadCallbacks.values()].forEach((callback) => {\r\n          console.log('on load', callback);\r\n          callback(src);\r\n        });\r\n      };\r\n      this.#images[src] = imageObject;\r\n      image.src = src;\r\n    }\r\n    return this.#images[src];\r\n  }\r\n\r\n  static getBoundingBoxDims(image: Dims, rotationRadians: number): Dims {\r\n    const boundingBoxWidth =\r\n      Math.abs(image.width * Math.cos(rotationRadians)) +\r\n      Math.abs(image.height * Math.sin(rotationRadians));\r\n    const boundingBoxHeight =\r\n      Math.abs(image.width * Math.sin(rotationRadians)) +\r\n      Math.abs(image.height * Math.cos(rotationRadians));\r\n\r\n    return {\r\n      width: boundingBoxWidth,\r\n      height: boundingBoxHeight,\r\n    };\r\n  }\r\n\r\n  static fitImageInsideBox(image: Dims, boundingBox: Dims): Dims {\r\n    if (\r\n      (boundingBox.width / image.width) * image.height <=\r\n      boundingBox.height\r\n    ) {\r\n      return {\r\n        width: boundingBox.width,\r\n        height: (boundingBox.width / image.width) * image.height,\r\n      };\r\n    }\r\n    return {\r\n      width: (boundingBox.height / image.height) * image.width,\r\n      height: boundingBox.height,\r\n    };\r\n  }\r\n\r\n  onImageLoad(callback: (src: string) => unknown): () => void {\r\n    const uniqueId = Symbol('image');\r\n    this.#onImageLoadCallbacks.set(uniqueId, callback);\r\n    return () => {\r\n      this.#onImageLoadCallbacks.delete(uniqueId);\r\n    };\r\n  }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { property } from 'lit/decorators.js';\r\nimport { LitElement } from 'lit';\r\nimport { FieldObjectApi } from './field-interfaces';\r\n\r\nexport default class FieldRobot extends LitElement {\r\n  @property({ type: String }) unit: string | null = 'inherit';\r\n  @property({ type: String, attribute: 'rotation-unit' }) rotationUnit:\r\n    | string\r\n    | null = 'inherit';\r\n  @property({ type: String }) image = '';\r\n  @property({ type: String }) color = '#0000ff';\r\n  @property({ type: Number }) opacity = 1;\r\n  @property({ type: Array }) pose = [0, 0, 0];\r\n  @property({ type: Number }) width = 0.6;\r\n  @property({ type: Number }) length = 0.9;\r\n\r\n  draw({\r\n    canvas,\r\n    unit: parentUnit,\r\n    rotationUnit: parentRotationUnit,\r\n    xToPx,\r\n    yToPx,\r\n    lengthToPx,\r\n    origin,\r\n  }: FieldObjectApi): void {\r\n    const unit =\r\n      this.unit === 'inherit' || this.unit === null ? parentUnit : this.unit;\r\n    const rotationUnit =\r\n      this.rotationUnit === 'inherit' || this.rotationUnit === null\r\n        ? parentRotationUnit\r\n        : this.rotationUnit;\r\n    const [x, y] = this.pose;\r\n    const angle =\r\n      rotationUnit === 'rad' ? this.pose[2] : this.pose[2] / (180 / Math.PI);\r\n\r\n    canvas.globalAlpha = Math.max(0, Math.min(1, this.opacity));\r\n    canvas.fillStyle = '#222';\r\n    canvas.strokeStyle = this.color;\r\n    canvas.lineWidth = lengthToPx(3, 'in');\r\n\r\n    canvas.translate(xToPx(x, unit), yToPx(y, unit));\r\n    canvas.rotate(-angle + (origin === 'red' ? Math.PI : 0));\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    canvas.roundRect(\r\n      -lengthToPx(this.length / 2, unit),\r\n      -lengthToPx(this.width / 2, unit),\r\n      lengthToPx(this.length, unit),\r\n      lengthToPx(this.width, unit),\r\n      1\r\n    );\r\n    canvas.fill();\r\n    canvas.stroke();\r\n\r\n    // draw arrow\r\n    canvas.beginPath();\r\n    canvas.fillStyle = 'white';\r\n    canvas.strokeStyle = 'white';\r\n    canvas.lineWidth = lengthToPx(2, 'in');\r\n\r\n    canvas.moveTo(-lengthToPx(this.length * 0.3, unit), 0);\r\n    canvas.lineTo(lengthToPx(this.length * 0.3, unit), 0);\r\n\r\n    canvas.moveTo(\r\n      lengthToPx(this.length * 0.1, unit),\r\n      -lengthToPx(this.width * 0.25, unit)\r\n    );\r\n    canvas.lineTo(lengthToPx(this.length * 0.3, unit), 0);\r\n    canvas.lineTo(\r\n      lengthToPx(this.length * 0.1, unit),\r\n      lengthToPx(this.width * 0.25, unit)\r\n    );\r\n\r\n    canvas.stroke();\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-field-robot')) {\r\n  customElements.define('frc-field-robot', FieldRobot);\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'frc-field-robot': FieldRobot;\r\n  }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-underscore-dangle */\r\nimport { LitElement } from 'lit';\r\nimport { property, state } from 'lit/decorators.js';\r\nimport getPoses from './get-poses';\r\nimport { FieldObjectApi } from './field-interfaces';\r\n\r\nexport default class FieldPath extends LitElement {\r\n  @property({ type: Array }) poses: Uint8Array | number[] = [];\r\n  @property({ type: Array }) translations: Uint8Array | number[] = [];\r\n  @property({ type: String }) color = '#FFA500';\r\n  @property({ type: String }) unit: string | null = 'inherit';\r\n  @property({ type: Number, attribute: 'line-width' }) lineWidth = 4;\r\n  @property({ type: Number }) opacity = 0.7;\r\n\r\n  @state() _poses: (Uint8Array | number[])[] = [];\r\n  @state() _translations: (Uint8Array | number[])[] = [];\r\n\r\n  updated(changedProps: Map<string, unknown>) {\r\n    if (changedProps.has('poses')) {\r\n      this._poses = getPoses(this.poses);\r\n    }\r\n    if (changedProps.has('translations')) {\r\n      this._translations = getPoses(this.translations, 2);\r\n    }\r\n  }\r\n\r\n  draw({ canvas, unit: parentUnit, xToPx, yToPx }: FieldObjectApi): void {\r\n    const unit =\r\n      this.unit === 'inherit' || this.unit === null ? parentUnit : this.unit;\r\n\r\n    canvas.lineWidth = this.lineWidth;\r\n    canvas.strokeStyle = this.color;\r\n    canvas.globalAlpha = this.opacity;\r\n\r\n    if (this._poses.length > 1) {\r\n      for (let i = 0; i < this._poses.length - 1; i += 1) {\r\n        const [x1, y1] = this._poses[i];\r\n        const [x2, y2] = this._poses[i + 1];\r\n        canvas.moveTo(xToPx(x1, unit), yToPx(y1, unit));\r\n        canvas.lineTo(xToPx(x2, unit), yToPx(y2, unit));\r\n      }\r\n\r\n      canvas.stroke();\r\n    }\r\n\r\n    if (this._translations.length > 1) {\r\n      for (let i = 0; i < this._translations.length - 1; i += 1) {\r\n        const [x1, y1] = this._translations[i];\r\n        const [x2, y2] = this._translations[i + 1];\r\n        canvas.moveTo(xToPx(x1, unit), yToPx(y1, unit));\r\n        canvas.lineTo(xToPx(x2, unit), yToPx(y2, unit));\r\n      }\r\n\r\n      canvas.stroke();\r\n    }\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-field-path')) {\r\n  customElements.define('frc-field-path', FieldPath);\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'frc-field-path': FieldPath;\r\n  }\r\n}\r\n","import { property, query } from 'lit/decorators.js';\r\nimport { html, css, LitElement, TemplateResult } from 'lit';\r\nimport fieldConfigs, { FieldConfig } from './field-configs';\r\nimport { baseUnit, convert } from './units';\r\nimport FieldImages from './field-images';\r\nimport './field-robot';\r\nimport './field-path';\r\nimport { CropType, FieldObjectApi, FieldObject } from './field-interfaces';\r\n\r\nfunction toRadians(degrees: number): number {\r\n  return (degrees * Math.PI) / 180;\r\n}\r\n\r\nexport default class Field extends LitElement {\r\n  @property({ type: String }) game = fieldConfigs[0].game;\r\n  @property({ type: Number, attribute: 'crop-top' }) cropTop: number | null =\r\n    null;\r\n  @property({ type: Number, attribute: 'crop-bottom' }) cropBottom:\r\n    | number\r\n    | null = null;\r\n  @property({ type: Number, attribute: 'crop-left' }) cropLeft: number | null =\r\n    null;\r\n  @property({ type: Number, attribute: 'crop-right' }) cropRight:\r\n    | number\r\n    | null = null;\r\n  @property({ type: String, attribute: 'crop-type' }) cropType: CropType =\r\n    'percent';\r\n  @property({ type: String }) unit = baseUnit;\r\n  @property({ type: String, attribute: 'rotation-unit' }) rotationUnit:\r\n    | 'deg'\r\n    | 'rad' = 'rad';\r\n  @property({ type: Number }) rotation = 0;\r\n  @property({ type: Boolean, attribute: 'show-grid' }) showGrid = false;\r\n  @property({ type: Number, attribute: 'grid-size' }) gridSize = 1;\r\n  @property({ type: String }) origin: 'red' | 'blue' = 'blue';\r\n\r\n  @query('canvas', true)\r\n  canvas!: HTMLCanvasElement;\r\n  @query('.container', true) container!: HTMLElement;\r\n\r\n  #fieldImages: FieldImages = new FieldImages();\r\n\r\n  static styles = css`\r\n    :host {\r\n      display: inline-flex;\r\n      position: relative;\r\n      width: 500px;\r\n      height: 300px;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    .container {\r\n    }\r\n\r\n    canvas {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  `;\r\n\r\n  getConfig(): FieldConfig {\r\n    const config = fieldConfigs.find(({ game }) => game === this.game);\r\n    return config ?? fieldConfigs[0];\r\n  }\r\n\r\n  getCanvasCtx(): CanvasRenderingContext2D {\r\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n    return ctx;\r\n  }\r\n\r\n  getCropPercent(): { x1: number; y1: number; x2: number; y2: number } {\r\n    if (this.cropType === 'percent') {\r\n      const x1 = this.cropLeft ?? 0;\r\n      const y1 = this.cropTop ?? 0;\r\n      const x2 = this.cropRight ?? 1;\r\n      const y2 = this.cropBottom ?? 1;\r\n      return { x1, y1, x2, y2 };\r\n    }\r\n\r\n    const { corners, image, unit, size } = this.getConfig();\r\n    const { loaded, width, height } = this.#fieldImages.getImage(image);\r\n\r\n    if (!loaded) {\r\n      return { x1: 0, y1: 0, x2: 1, y2: 1 };\r\n    }\r\n\r\n    const topLeftCrop = [this.cropLeft ?? 0, this.cropTop ?? 0];\r\n    const bottomRightCrop = [\r\n      this.cropRight ?? convert(size[0], unit, this.unit),\r\n      this.cropBottom ?? convert(size[1], unit, this.unit),\r\n    ];\r\n\r\n    const x1Corner = corners.topLeft[0] / width;\r\n    const y1Corner = corners.topLeft[1] / height;\r\n    const x2Corner = corners.bottomRight[0] / width;\r\n    const y2Corner = corners.bottomRight[1] / height;\r\n\r\n    const widthPercent = x2Corner - x1Corner;\r\n    const heightPercent = y2Corner - y1Corner;\r\n\r\n    const value = {\r\n      x1:\r\n        x1Corner +\r\n        (widthPercent * convert(topLeftCrop[0], this.unit, unit)) / size[0],\r\n      y1:\r\n        y1Corner +\r\n        (heightPercent * convert(topLeftCrop[1], this.unit, unit)) / size[1],\r\n      x2:\r\n        x1Corner +\r\n        (widthPercent * convert(bottomRightCrop[0], this.unit, unit)) / size[0],\r\n      y2:\r\n        y1Corner +\r\n        (heightPercent * convert(bottomRightCrop[1], this.unit, unit)) /\r\n          size[1],\r\n    };\r\n\r\n    return value;\r\n  }\r\n\r\n  getFieldRectPx(): { x: number; y: number; width: number; height: number } {\r\n    const { corners, image } = this.getConfig();\r\n    const { loaded, width, height } = this.#fieldImages.getImage(image);\r\n\r\n    if (!loaded) {\r\n      return { x: 0, y: 0, width: 0, height: 0 };\r\n    }\r\n\r\n    const x1Percent = corners.topLeft[0] / width;\r\n    const y1Percent = corners.topLeft[1] / height;\r\n    const x2Percent = corners.bottomRight[0] / width;\r\n    const y2Percent = corners.bottomRight[1] / height;\r\n\r\n    const cropPercent = this.getCropPercent();\r\n    const cropWidthPercent = cropPercent.x2 - cropPercent.x1;\r\n    const cropHeightPercent = cropPercent.y2 - cropPercent.y1;\r\n    const originalWidth = this.canvas.width / cropWidthPercent;\r\n    const originalHeight = this.canvas.height / cropHeightPercent;\r\n\r\n    return {\r\n      x: (x1Percent - cropPercent.x1) * originalWidth,\r\n      y: (y1Percent - cropPercent.y1) * originalHeight,\r\n      width: (x2Percent - x1Percent) * originalWidth,\r\n      height: (y2Percent - y1Percent) * originalHeight,\r\n    };\r\n  }\r\n\r\n  xToPx(xUnits: number, unit: string = this.unit): number {\r\n    const fieldRectPx = this.getFieldRectPx();\r\n    const { size, unit: configUnit } = this.getConfig();\r\n\r\n    if (fieldRectPx.width === 0) {\r\n      return 0;\r\n    }\r\n\r\n    const pxPerUnit = fieldRectPx.width / size[0];\r\n    const xValue = convert(xUnits, unit, configUnit);\r\n    return this.origin !== 'red'\r\n      ? fieldRectPx.x + xValue * pxPerUnit\r\n      : fieldRectPx.x + fieldRectPx.width - xValue * pxPerUnit;\r\n  }\r\n\r\n  yToPx(yUnits: number, unit: string = this.unit): number {\r\n    const fieldRectPx = this.getFieldRectPx();\r\n    const { size, unit: configUnit } = this.getConfig();\r\n\r\n    if (fieldRectPx.height === 0) {\r\n      return 0;\r\n    }\r\n\r\n    const pxPerUnit = fieldRectPx.height / size[1];\r\n    const yValue = convert(yUnits, unit, configUnit);\r\n    return this.origin !== 'red'\r\n      ? fieldRectPx.y + fieldRectPx.height - yValue * pxPerUnit\r\n      : fieldRectPx.y + yValue * pxPerUnit;\r\n  }\r\n\r\n  lengthToPx(length: number, unit: string = this.unit): number {\r\n    const fieldRectPx = this.getFieldRectPx();\r\n    const { size, unit: configUnit } = this.getConfig();\r\n\r\n    if (fieldRectPx.width === 0) {\r\n      return 0;\r\n    }\r\n\r\n    const pxPerUnit = fieldRectPx.width / size[0];\r\n    const lengthConverted = convert(length, unit, configUnit);\r\n    return lengthConverted * pxPerUnit;\r\n  }\r\n\r\n  setContainerSize(): void {\r\n    const rect = { width: this.clientWidth, height: this.clientHeight };\r\n    const src = this.getConfig().image;\r\n    const imageObject = this.#fieldImages.getImage(src);\r\n    const { loaded } = imageObject;\r\n\r\n    if (!loaded) {\r\n      return;\r\n    }\r\n\r\n    const cropPercent = this.getCropPercent();\r\n\r\n    const imageDims = {\r\n      width: (cropPercent.x2 - cropPercent.x1) * imageObject.width,\r\n      height: (cropPercent.y2 - cropPercent.y1) * imageObject.height,\r\n    };\r\n\r\n    const boundingBoxDims = FieldImages.getBoundingBoxDims(\r\n      imageDims,\r\n      toRadians(this.rotation)\r\n    );\r\n\r\n    const dims = FieldImages.fitImageInsideBox(boundingBoxDims, {\r\n      width: rect.width,\r\n      height: rect.height,\r\n    });\r\n    const scale = dims.width / boundingBoxDims.width;\r\n    this.container.style.width = `${imageDims.width * scale}px`;\r\n    this.container.style.height = `${imageDims.height * scale}px`;\r\n  }\r\n\r\n  drawImage(): void {\r\n    const ctx = this.getCanvasCtx();\r\n    const src = this.getConfig().image;\r\n    const { loaded, image, width, height } = this.#fieldImages.getImage(src);\r\n    if (!loaded) {\r\n      return;\r\n    }\r\n    const { clientWidth, clientHeight } = this.canvas;\r\n    const canvasWidth = clientWidth * window.devicePixelRatio;\r\n    const canvasHeight = clientHeight * window.devicePixelRatio;\r\n    this.canvas.width = canvasWidth;\r\n    this.canvas.height = canvasHeight;\r\n    const cropPercent = this.getCropPercent();\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      cropPercent.x1 * width,\r\n      cropPercent.y1 * height,\r\n      (cropPercent.x2 - cropPercent.x1) * width,\r\n      (cropPercent.y2 - cropPercent.y1) * height,\r\n      0,\r\n      0,\r\n      canvasWidth,\r\n      canvasHeight\r\n    );\r\n  }\r\n\r\n  drawFieldRect(): void {\r\n    const ctx = this.getCanvasCtx();\r\n    const { x, y, width, height } = this.getFieldRectPx();\r\n    ctx.rect(x, y, width, height);\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = 'yellow';\r\n    ctx.stroke();\r\n  }\r\n\r\n  drawGrid(): void {\r\n    const ctx = this.getCanvasCtx();\r\n    const { image, size } = this.getConfig();\r\n    const { loaded } = this.#fieldImages.getImage(image);\r\n\r\n    if (!loaded || !this.showGrid || this.gridSize <= 0) {\r\n      return;\r\n    }\r\n\r\n    // Set the stroke width and color\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = 'gray';\r\n\r\n    for (let x = 0; x <= size[0]; x += this.gridSize) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.xToPx(x), this.yToPx(0));\r\n      ctx.lineTo(this.xToPx(x), this.yToPx(size[1]));\r\n      ctx.stroke();\r\n    }\r\n\r\n    for (let y = 0; y <= size[1]; y += this.gridSize) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.xToPx(0), this.yToPx(y));\r\n      ctx.lineTo(this.xToPx(size[0]), this.yToPx(y));\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  drawChildren(): void {\r\n    const api: FieldObjectApi = {\r\n      canvas: this.getCanvasCtx(),\r\n      getFieldRectPx: () => this.getFieldRectPx(),\r\n      unit: this.unit,\r\n      rotationUnit: this.rotationUnit,\r\n      xToPx: (xUnits, unit) => this.xToPx(xUnits, unit),\r\n      yToPx: (yUnits, unit) => this.yToPx(yUnits, unit),\r\n      lengthToPx: (length, unit) => this.lengthToPx(length, unit),\r\n      origin: this.origin,\r\n    };\r\n\r\n    [...this.children].forEach((child) => {\r\n      const ctx = this.getCanvasCtx();\r\n      ctx.save();\r\n      ctx.beginPath();\r\n\r\n      const fieldObject = child as any as FieldObject;\r\n      fieldObject.draw?.(api);\r\n\r\n      ctx.restore();\r\n    });\r\n  }\r\n\r\n  drawField(): void {\r\n    this.setContainerSize();\r\n    this.drawImage();\r\n    this.drawFieldRect();\r\n    this.drawGrid();\r\n    this.drawChildren();\r\n\r\n    window.requestAnimationFrame(() => {\r\n      this.drawField();\r\n    });\r\n  }\r\n\r\n  firstUpdated(): void {\r\n    this.drawField();\r\n  }\r\n\r\n  render(): TemplateResult {\r\n    return html`\r\n      <div class=\"outside-container\">\r\n        <div class=\"container\" style=\"transform: rotate(${-this.rotation}deg)\">\r\n          <canvas></canvas>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-field')) {\r\n  customElements.define('frc-field', Field);\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'frc-field': Field;\r\n  }\r\n}\r\n"],"names":["configs","FieldImages","__privateAdd","_images","_onImageLoadCallbacks","src","__privateGet","image","imageObject","callback","rotationRadians","boundingBoxWidth","boundingBoxHeight","boundingBox","uniqueId","FieldRobot","LitElement","canvas","parentUnit","parentRotationUnit","xToPx","yToPx","lengthToPx","origin","unit","rotationUnit","x","y","angle","__decorateClass","property","changedProps","getPoses","i","x1","y1","x2","y2","FieldPath","state","_fieldImages","toRadians","degrees","fieldConfigs","baseUnit","game","corners","size","loaded","width","height","topLeftCrop","bottomRightCrop","convert","x1Corner","y1Corner","x2Corner","y2Corner","widthPercent","heightPercent","x1Percent","y1Percent","x2Percent","y2Percent","cropPercent","cropWidthPercent","cropHeightPercent","originalWidth","originalHeight","xUnits","fieldRectPx","configUnit","pxPerUnit","xValue","yUnits","yValue","length","rect","imageDims","boundingBoxDims","scale","ctx","clientWidth","clientHeight","canvasWidth","canvasHeight","api","child","fieldObject","_a","html","Field","css","query"],"mappings":"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"}