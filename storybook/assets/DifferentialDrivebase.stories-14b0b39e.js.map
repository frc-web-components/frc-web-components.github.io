{"version":3,"file":"DifferentialDrivebase.stories-14b0b39e.js","sources":["../../src/elements/base/drivebases/differential.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { html, css, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport * as CurvedArrow from './curved-arrow';\nimport '../base-elements/bar';\nimport '../base-elements/axis';\n/**\n * Copyright (c) 2017-2018 FIRST\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of FIRST nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY FIRST AND CONTRIBUTORS \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY NONINFRINGEMENT AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FIRST OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction clamp(value: number, min: number, max: number) {\n  return Math.min(max, Math.max(value, min));\n}\n\nfunction map(\n  x: number,\n  minInput: number,\n  maxInput: number,\n  minOutput: number,\n  maxOutput: number\n) {\n  return (\n    ((x - minInput) * (maxOutput - minOutput)) / (maxInput - minInput) +\n    minOutput\n  );\n}\n\nfunction generateX(width: number) {\n  const halfW = width / 2;\n  const lineA = `\n    <line \n      x1=\"${-halfW}\"\n      y1=\"${-halfW}\"\n      x2=\"${halfW}\"\n      y2=\"${halfW}\"\n    />\n  `;\n\n  const lineB = `\n    <line \n      x1=\"${-halfW}\"\n      y1=\"${halfW}\"\n      x2=\"${halfW}\"\n      y2=\"${-halfW}\"\n    />\n  `;\n\n  return `<g class=\"x\">${lineA} ${lineB}</g>`;\n}\n\nexport default class DifferentialDrivebase extends LitElement {\n  @property({ type: Number, attribute: 'left-motor-speed' }) leftMotorSpeed = 0;\n  @property({ type: Number, attribute: 'right-motor-speed' })\n  rightMotorSpeed = 0;\n\n  static styles = css`\n    :host {\n      display: inline-block;\n      width: 400px;\n      height: 300px;\n      padding: 0 10px;\n      font-family: sans-serif;\n    }\n\n    .diff-drive-container {\n      height: 100%;\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: center;\n    }\n\n    svg {\n      overflow: overlay;\n      flex: 1;\n      height: 100%;\n    }\n\n    svg .x {\n      stroke: rgb(50, 50, 255);\n      stroke-width: 2;\n    }\n\n    svg .arrow line,\n    svg .arrow path {\n      stroke: rgb(50, 50, 255);\n      stroke-width: 2;\n      fill: none;\n    }\n\n    svg .arrow polygon {\n      stroke: rgb(50, 50, 255);\n      fill: rgb(50, 50, 255);\n    }\n\n    svg .drivetrain {\n      fill: none;\n      stroke: var(--frc-differential-drivebase-drivetrain-color, #000);\n    }\n\n    .bar {\n      position: relative;\n      height: calc(100% - 30px);\n      width: 20px;\n      border-radius: 3px;\n      margin: 15px 0;\n      background: var(--frc-bar-background, #ddd);\n    }\n\n    .speed {\n      display: flex;\n      height: 100%;\n      flex-direction: row;\n      align-items: center;\n      margin-left: 30px;\n    }\n\n    frc-axis {\n      width: 10px;\n      height: calc(100% - 35px);\n    }\n\n    .foreground {\n      position: absolute;\n      top: 0;\n      width: 20px;\n      background: var(--frc-bar-foreground, lightblue);\n      border-radius: 3px;\n    }\n  `;\n\n  get clampedLeftMotorSpeed() {\n    return clamp(this.leftMotorSpeed, -1, 1);\n  }\n\n  get clampedRightMotorSpeed() {\n    return clamp(this.rightMotorSpeed, -1, 1);\n  }\n\n  constructor() {\n    super();\n\n    const resizeObserver = new ResizeObserver(() => {\n      this.resized();\n    });\n    resizeObserver.observe(this);\n  }\n\n  drawMotionVector(left: number, right: number) {\n    const svgNode = this.renderRoot.querySelector('#svg')!;\n    const rect = svgNode.getBoundingClientRect();\n\n    const wheelWidth = rect.width * 0.13;\n    const padding = 20;\n    const verticalPadding = 20;\n\n    const FRAME_WIDTH = rect.width - (wheelWidth + padding) * 2;\n    const FRAME_HEIGHT = rect.height - verticalPadding * 2;\n\n    // Barely moving, or not moving at all. Curved arrows look weird at low radii, so show an X instead\n    if (Math.abs(left) <= 0.05 && Math.abs(right) <= 0.05) {\n      return generateX(rect.width * 0.2);\n    }\n\n    // Max radius is half of the narrowest dimension, minus padding to avoid clipping with the frame\n    const maxRadius = Math.min(FRAME_WIDTH, FRAME_HEIGHT) / 2 - 8;\n    const arrowheadSize = 8;\n    if (Math.abs(left - right) <= 0.001) {\n      // Moving more-or-less straight (or not moving at all)\n      // Using a threshold instead of a simpler `if(left == right)` avoids edge cases where left and right are very\n      // close, which can cause floating-point issues with extremely large radii (on the order of 1E15 pixels)\n      // and extremely small arc lengths (on the order of 1E-15 degrees)\n      const arrow = CurvedArrow.createStraight(\n        Math.abs(left * maxRadius),\n        (-Math.sign(left) * Math.PI) / 2,\n        0,\n        arrowheadSize\n      );\n      return `<g class=\"arrow\">${arrow}</g>`;\n    }\n    // Moving in an arc\n\n    const pi = Math.PI;\n    const moment = (right - left) / 2;\n    const avgSpeed = (left + right) / 2;\n    const turnRadius = avgSpeed / moment;\n\n    let arrow;\n\n    if (Math.abs(turnRadius) >= 1) {\n      // Motion is mostly forward/backward, and curving to a side\n\n      const arcSign = -Math.sign(turnRadius); // +1 if arc is to left of frame, -1 if arc is to the right\n      const startAngle = ((arcSign + 1) * pi) / 2; // pi if arc is to the right, 0 if to the left\n      const radius = Math.abs(turnRadius * maxRadius);\n      arrow = CurvedArrow.create(\n        startAngle,\n        radius,\n        arcSign * avgSpeed * maxRadius,\n        arcSign * radius,\n        arrowheadSize\n      );\n    } else {\n      // Turning about a point inside the frame of the robot\n      const turnSign = Math.sign(left - right); // positive for clockwise, negative for counter-clockwise\n      if (turnRadius === 0) {\n        // Special case, rotating about the center of the frame\n        const radius = Math.max(left, right) * maxRadius; // left == -right, we just want the positive one\n        const angle = turnSign * pi;\n        const start = moment < 0 ? pi : 0;\n        arrow = CurvedArrow.createPolar(start, radius, angle, 0, arrowheadSize);\n      } else {\n        const dominant = turnRadius < 0 ? left : right; // the dominant side that's driving the robot\n        const secondary = turnRadius < 0 ? right : left; // the non-dominant side\n        const radius = Math.abs(dominant) * maxRadius; // make radius dependent on how fast the dominant side is\n        const centerX = -turnRadius * radius;\n        const angle = map(secondary / dominant, 0, -1, 0.5, pi);\n        const start = turnRadius < 0 ? pi : 0;\n        arrow = CurvedArrow.createPolar(\n          start,\n          radius,\n          turnSign * angle,\n          centerX,\n          arrowheadSize\n        );\n      }\n    }\n    return `<g class=\"arrow\">${arrow}</g>`;\n  }\n\n  drawDrivetrain() {\n    const svgNode = this.renderRoot.querySelector('#svg')!;\n    const rect = svgNode.getBoundingClientRect();\n\n    const wheelWidth = rect.width * 0.13;\n    const wheelRadius = Math.min(rect.width * 0.13, rect.height * 0.15);\n    const padding = 20;\n    const verticalPadding = 20;\n\n    const base = `\n      <rect \n        width=\"calc(100% - ${(wheelWidth + padding) * 2}px)\" \n        height=\"calc(100% - ${verticalPadding * 2}px)\"\n        x=\"${wheelWidth + padding}\" \n        y=\"20px\" \n      />\n    `;\n\n    const tlWheel = `\n      <rect \n        width=\"${wheelWidth}px\" \n        height=\"${wheelRadius * 2}\" \n        x=\"${padding}px\" \n        y=\"${verticalPadding}px\" \n      />\n    `;\n\n    const trWheel = `\n      <rect \n        width=\"${wheelWidth}px\" \n        height=\"${wheelRadius * 2}\" \n        x=\"calc(100% - ${wheelWidth + padding}px)\" \n        y=\"${verticalPadding}px\" \n      />\n    `;\n\n    const blWheel = `\n      <rect \n        width=\"${wheelWidth}px\" \n        height=\"${wheelRadius * 2}\" \n        x=\"${padding}px\"\n        y=\"calc(100% - ${wheelRadius * 2 + verticalPadding}px)\"\n      />\n    `;\n\n    const brWheel = `\n      <rect \n        width=\"${wheelWidth}px\" \n        height=\"${wheelRadius * 2}\" \n        x=\"calc(100% - ${wheelWidth + padding}px)\" \n        y=\"calc(100% - ${wheelRadius * 2 + verticalPadding}px)\"\n      />\n    `;\n\n    return base + tlWheel + trWheel + blWheel + brWheel;\n  }\n\n  getLeftForegroundStyle() {\n    return this.getForegroundStyle(this.clampedLeftMotorSpeed);\n  }\n\n  getRightForegroundStyle() {\n    return this.getForegroundStyle(this.clampedRightMotorSpeed);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getForegroundStyle(value: number) {\n    const min = -1;\n    const max = 1;\n    const val = clamp(value, min, max);\n\n    if (max < 0) {\n      return `\n        height: ${(Math.abs(val - max) / (max - min)) * 100}%;\n        top: 'auto';\n        bottom: 0;\n      `;\n    }\n    if (min > 0) {\n      return `\n        height: ${(Math.abs(val - min) / (max - min)) * 100}%;\n        top: 0;\n        bottom: 'auto';\n      `;\n    }\n    if (val > 0) {\n      return `\n        height: ${(Math.abs(val) / (max - min)) * 100}%;\n        top: auto;\n        bottom: 50%;\n      `;\n    }\n    return `\n        height: ${(Math.abs(val) / (max - min)) * 100}%;\n        top: 50%;\n        bottom: auto;\n      `;\n  }\n\n  firstUpdated() {\n    const drawing = this.drawMotionVector(0, 0);\n    this.renderRoot.querySelector('#drivetrain')!.innerHTML =\n      this.drawDrivetrain();\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\n  }\n\n  resized() {\n    const drawing = this.drawMotionVector(\n      this.clampedLeftMotorSpeed,\n      this.clampedRightMotorSpeed\n    );\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\n    const svgNode = this.renderRoot.querySelector('#svg')!;\n    const rect = svgNode.getBoundingClientRect();\n    (\n      this.renderRoot.querySelector('#forceVector')! as HTMLElement\n    ).style.transform = `translate(${rect.width * 0.5}px, ${\n      rect.height * 0.5\n    }px)`;\n    this.renderRoot.querySelector('#drivetrain')!.innerHTML =\n      this.drawDrivetrain();\n  }\n\n  updated() {\n    const drawing = this.drawMotionVector(\n      this.clampedLeftMotorSpeed,\n      this.clampedRightMotorSpeed\n    );\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\n  }\n\n  render() {\n    return html`\n      <div class=\"diff-drive-container\">\n        <div class=\"speed\">\n          <frc-axis\n            ticks=\"5\"\n            vertical\n            .range=\"${[1, -1]}\"\n          ></frc-axis>\n          <div class=\"bar\">\n            <div\n              class=\"foreground\"\n              style=\"${this.getLeftForegroundStyle()}\"\n            ></div>\n          </div>\n        </div>\n        <svg id=\"svg\">\n          <g id=\"forceVector\"></g>\n          <g id=\"drivetrain\" class=\"drivetrain\"></g>\n        </svg>\n        <div class=\"speed\">\n          <frc-axis\n            ticks=\"5\"\n            vertical\n            .range=\"${[1, -1]}\"\n          ></frc-axis>\n          <div class=\"bar\">\n            <div\n              class=\"foreground\"\n              style=\"${this.getRightForegroundStyle()}\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n\nif (!customElements.get('frc-differential-drivebase')) {\n  customElements.define('frc-differential-drivebase', DifferentialDrivebase);\n}\n"],"names":["clamp","value","min","max","map","x","minInput","maxInput","minOutput","maxOutput","generateX","width","halfW","lineA","lineB","DifferentialDrivebase","LitElement","left","right","rect","wheelWidth","padding","verticalPadding","FRAME_WIDTH","FRAME_HEIGHT","maxRadius","arrowheadSize","CurvedArrow.createStraight","pi","moment","avgSpeed","turnRadius","arrow","arcSign","startAngle","radius","CurvedArrow.create","turnSign","angle","start","CurvedArrow.createPolar","dominant","secondary","centerX","wheelRadius","base","tlWheel","trWheel","blWheel","brWheel","val","drawing","html","css","__decorateClass","property"],"mappings":"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"}