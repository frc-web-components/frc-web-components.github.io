{"version":3,"file":"DifferentialDrivebase.stories-041e397a.js","sources":["../../src/components/drivebases/differential.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\r\nimport { html, css, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport * as CurvedArrow from './curved-arrow';\r\nimport '../bar';\r\nimport '../axis';\r\n/**\r\n * Copyright (c) 2017-2018 FIRST\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of FIRST nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY FIRST AND CONTRIBUTORS \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY NONINFRINGEMENT AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FIRST OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.min(max, Math.max(value, min));\r\n}\r\n\r\nfunction map(\r\n  x: number,\r\n  minInput: number,\r\n  maxInput: number,\r\n  minOutput: number,\r\n  maxOutput: number\r\n) {\r\n  return (\r\n    ((x - minInput) * (maxOutput - minOutput)) / (maxInput - minInput) +\r\n    minOutput\r\n  );\r\n}\r\n\r\nfunction generateX(width: number) {\r\n  const halfW = width / 2;\r\n  const lineA = `\r\n    <line \r\n      x1=\"${-halfW}\"\r\n      y1=\"${-halfW}\"\r\n      x2=\"${halfW}\"\r\n      y2=\"${halfW}\"\r\n    />\r\n  `;\r\n\r\n  const lineB = `\r\n    <line \r\n      x1=\"${-halfW}\"\r\n      y1=\"${halfW}\"\r\n      x2=\"${halfW}\"\r\n      y2=\"${-halfW}\"\r\n    />\r\n  `;\r\n\r\n  return `<g class=\"x\">${lineA} ${lineB}</g>`;\r\n}\r\n\r\nexport default class DifferentialDrivebase extends LitElement {\r\n  @property({ type: Number, attribute: 'left-motor-speed' }) leftMotorSpeed = 0;\r\n  @property({ type: Number, attribute: 'right-motor-speed' })\r\n  rightMotorSpeed = 0;\r\n\r\n  static styles = css`\r\n    :host {\r\n      display: inline-block;\r\n      width: 400px;\r\n      height: 300px;\r\n      padding: 0 10px;\r\n      font-family: sans-serif;\r\n    }\r\n\r\n    .diff-drive-container {\r\n      height: 100%;\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    svg {\r\n      overflow: overlay;\r\n      flex: 1;\r\n      height: 100%;\r\n    }\r\n\r\n    svg .x {\r\n      stroke: rgb(50, 50, 255);\r\n      stroke-width: 2;\r\n    }\r\n\r\n    svg .arrow line,\r\n    svg .arrow path {\r\n      stroke: rgb(50, 50, 255);\r\n      stroke-width: 2;\r\n      fill: none;\r\n    }\r\n\r\n    svg .arrow polygon {\r\n      stroke: rgb(50, 50, 255);\r\n      fill: rgb(50, 50, 255);\r\n    }\r\n\r\n    svg .drivetrain {\r\n      fill: none;\r\n      stroke: var(--frc-differential-drivebase-drivetrain-color, #000);\r\n    }\r\n\r\n    .bar {\r\n      position: relative;\r\n      height: calc(100% - 30px);\r\n      width: 20px;\r\n      border-radius: 3px;\r\n      margin: 15px 0;\r\n      background: var(--frc-bar-background, #ddd);\r\n    }\r\n\r\n    .speed {\r\n      display: flex;\r\n      height: 100%;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      margin-left: 30px;\r\n    }\r\n\r\n    frc-axis {\r\n      width: 10px;\r\n      height: calc(100% - 35px);\r\n    }\r\n\r\n    .foreground {\r\n      position: absolute;\r\n      top: 0;\r\n      width: 20px;\r\n      background: var(--frc-bar-foreground, lightblue);\r\n      border-radius: 3px;\r\n    }\r\n  `;\r\n\r\n  get clampedLeftMotorSpeed() {\r\n    return clamp(this.leftMotorSpeed, -1, 1);\r\n  }\r\n\r\n  get clampedRightMotorSpeed() {\r\n    return clamp(this.rightMotorSpeed, -1, 1);\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      this.resized();\r\n    });\r\n    resizeObserver.observe(this);\r\n  }\r\n\r\n  drawMotionVector(left: number, right: number) {\r\n    const svgNode = this.renderRoot.querySelector('#svg')!;\r\n    const rect = svgNode.getBoundingClientRect();\r\n\r\n    const wheelWidth = rect.width * 0.13;\r\n    const padding = 20;\r\n    const verticalPadding = 20;\r\n\r\n    const FRAME_WIDTH = rect.width - (wheelWidth + padding) * 2;\r\n    const FRAME_HEIGHT = rect.height - verticalPadding * 2;\r\n\r\n    // Barely moving, or not moving at all. Curved arrows look weird at low radii, so show an X instead\r\n    if (Math.abs(left) <= 0.05 && Math.abs(right) <= 0.05) {\r\n      return generateX(rect.width * 0.2);\r\n    }\r\n\r\n    // Max radius is half of the narrowest dimension, minus padding to avoid clipping with the frame\r\n    const maxRadius = Math.min(FRAME_WIDTH, FRAME_HEIGHT) / 2 - 8;\r\n    const arrowheadSize = 8;\r\n    if (Math.abs(left - right) <= 0.001) {\r\n      // Moving more-or-less straight (or not moving at all)\r\n      // Using a threshold instead of a simpler `if(left == right)` avoids edge cases where left and right are very\r\n      // close, which can cause floating-point issues with extremely large radii (on the order of 1E15 pixels)\r\n      // and extremely small arc lengths (on the order of 1E-15 degrees)\r\n      const arrow = CurvedArrow.createStraight(\r\n        Math.abs(left * maxRadius),\r\n        (-Math.sign(left) * Math.PI) / 2,\r\n        0,\r\n        arrowheadSize\r\n      );\r\n      return `<g class=\"arrow\">${arrow}</g>`;\r\n    }\r\n    // Moving in an arc\r\n\r\n    const pi = Math.PI;\r\n    const moment = (right - left) / 2;\r\n    const avgSpeed = (left + right) / 2;\r\n    const turnRadius = avgSpeed / moment;\r\n\r\n    let arrow;\r\n\r\n    if (Math.abs(turnRadius) >= 1) {\r\n      // Motion is mostly forward/backward, and curving to a side\r\n\r\n      const arcSign = -Math.sign(turnRadius); // +1 if arc is to left of frame, -1 if arc is to the right\r\n      const startAngle = ((arcSign + 1) * pi) / 2; // pi if arc is to the right, 0 if to the left\r\n      const radius = Math.abs(turnRadius * maxRadius);\r\n      arrow = CurvedArrow.create(\r\n        startAngle,\r\n        radius,\r\n        arcSign * avgSpeed * maxRadius,\r\n        arcSign * radius,\r\n        arrowheadSize\r\n      );\r\n    } else {\r\n      // Turning about a point inside the frame of the robot\r\n      const turnSign = Math.sign(left - right); // positive for clockwise, negative for counter-clockwise\r\n      if (turnRadius === 0) {\r\n        // Special case, rotating about the center of the frame\r\n        const radius = Math.max(left, right) * maxRadius; // left == -right, we just want the positive one\r\n        const angle = turnSign * pi;\r\n        const start = moment < 0 ? pi : 0;\r\n        arrow = CurvedArrow.createPolar(start, radius, angle, 0, arrowheadSize);\r\n      } else {\r\n        const dominant = turnRadius < 0 ? left : right; // the dominant side that's driving the robot\r\n        const secondary = turnRadius < 0 ? right : left; // the non-dominant side\r\n        const radius = Math.abs(dominant) * maxRadius; // make radius dependent on how fast the dominant side is\r\n        const centerX = -turnRadius * radius;\r\n        const angle = map(secondary / dominant, 0, -1, 0.5, pi);\r\n        const start = turnRadius < 0 ? pi : 0;\r\n        arrow = CurvedArrow.createPolar(\r\n          start,\r\n          radius,\r\n          turnSign * angle,\r\n          centerX,\r\n          arrowheadSize\r\n        );\r\n      }\r\n    }\r\n    return `<g class=\"arrow\">${arrow}</g>`;\r\n  }\r\n\r\n  drawDrivetrain() {\r\n    const svgNode = this.renderRoot.querySelector('#svg')!;\r\n    const rect = svgNode.getBoundingClientRect();\r\n\r\n    const wheelWidth = rect.width * 0.13;\r\n    const wheelRadius = Math.min(rect.width * 0.13, rect.height * 0.15);\r\n    const padding = 20;\r\n    const verticalPadding = 20;\r\n\r\n    const base = `\r\n      <rect \r\n        width=\"calc(100% - ${(wheelWidth + padding) * 2}px)\" \r\n        height=\"calc(100% - ${verticalPadding * 2}px)\"\r\n        x=\"${wheelWidth + padding}\" \r\n        y=\"20px\" \r\n      />\r\n    `;\r\n\r\n    const tlWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"${padding}px\" \r\n        y=\"${verticalPadding}px\" \r\n      />\r\n    `;\r\n\r\n    const trWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"calc(100% - ${wheelWidth + padding}px)\" \r\n        y=\"${verticalPadding}px\" \r\n      />\r\n    `;\r\n\r\n    const blWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"${padding}px\"\r\n        y=\"calc(100% - ${wheelRadius * 2 + verticalPadding}px)\"\r\n      />\r\n    `;\r\n\r\n    const brWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"calc(100% - ${wheelWidth + padding}px)\" \r\n        y=\"calc(100% - ${wheelRadius * 2 + verticalPadding}px)\"\r\n      />\r\n    `;\r\n\r\n    return base + tlWheel + trWheel + blWheel + brWheel;\r\n  }\r\n\r\n  getLeftForegroundStyle() {\r\n    return this.getForegroundStyle(this.clampedLeftMotorSpeed);\r\n  }\r\n\r\n  getRightForegroundStyle() {\r\n    return this.getForegroundStyle(this.clampedRightMotorSpeed);\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  getForegroundStyle(value: number) {\r\n    const min = -1;\r\n    const max = 1;\r\n    const val = clamp(value, min, max);\r\n\r\n    if (max < 0) {\r\n      return `\r\n        height: ${(Math.abs(val - max) / (max - min)) * 100}%;\r\n        top: 'auto';\r\n        bottom: 0;\r\n      `;\r\n    }\r\n    if (min > 0) {\r\n      return `\r\n        height: ${(Math.abs(val - min) / (max - min)) * 100}%;\r\n        top: 0;\r\n        bottom: 'auto';\r\n      `;\r\n    }\r\n    if (val > 0) {\r\n      return `\r\n        height: ${(Math.abs(val) / (max - min)) * 100}%;\r\n        top: auto;\r\n        bottom: 50%;\r\n      `;\r\n    }\r\n    return `\r\n        height: ${(Math.abs(val) / (max - min)) * 100}%;\r\n        top: 50%;\r\n        bottom: auto;\r\n      `;\r\n  }\r\n\r\n  firstUpdated() {\r\n    const drawing = this.drawMotionVector(0, 0);\r\n    this.renderRoot.querySelector('#drivetrain')!.innerHTML =\r\n      this.drawDrivetrain();\r\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\r\n  }\r\n\r\n  resized() {\r\n    const drawing = this.drawMotionVector(\r\n      this.clampedLeftMotorSpeed,\r\n      this.clampedRightMotorSpeed\r\n    );\r\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\r\n    const svgNode = this.renderRoot.querySelector('#svg')!;\r\n    const rect = svgNode.getBoundingClientRect();\r\n    (\r\n      this.renderRoot.querySelector('#forceVector')! as HTMLElement\r\n    ).style.transform = `translate(${rect.width * 0.5}px, ${\r\n      rect.height * 0.5\r\n    }px)`;\r\n    this.renderRoot.querySelector('#drivetrain')!.innerHTML =\r\n      this.drawDrivetrain();\r\n  }\r\n\r\n  updated() {\r\n    const drawing = this.drawMotionVector(\r\n      this.clampedLeftMotorSpeed,\r\n      this.clampedRightMotorSpeed\r\n    );\r\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"diff-drive-container\">\r\n        <div class=\"speed\">\r\n          <frc-axis ticks=\"5\" vertical min=\"1\" max=\"-1\"></frc-axis>\r\n          <div class=\"bar\">\r\n            <div\r\n              class=\"foreground\"\r\n              style=\"${this.getLeftForegroundStyle()}\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n        <svg id=\"svg\">\r\n          <g id=\"forceVector\"></g>\r\n          <g id=\"drivetrain\" class=\"drivetrain\"></g>\r\n        </svg>\r\n        <div class=\"speed\">\r\n          <frc-axis ticks=\"5\" vertical min=\"1\" max=\"-1\"></frc-axis>\r\n          <div class=\"bar\">\r\n            <div\r\n              class=\"foreground\"\r\n              style=\"${this.getRightForegroundStyle()}\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-differential-drivebase')) {\r\n  customElements.define('frc-differential-drivebase', DifferentialDrivebase);\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'frc-differential-drivebase': DifferentialDrivebase;\r\n  }\r\n}\r\n"],"names":["clamp","value","min","max","map","x","minInput","maxInput","minOutput","maxOutput","generateX","width","halfW","lineA","lineB","DifferentialDrivebase","LitElement","left","right","rect","wheelWidth","padding","verticalPadding","FRAME_WIDTH","FRAME_HEIGHT","maxRadius","arrowheadSize","CurvedArrow.createStraight","pi","moment","avgSpeed","turnRadius","arrow","arcSign","startAngle","radius","CurvedArrow.create","turnSign","angle","start","CurvedArrow.createPolar","dominant","secondary","centerX","wheelRadius","base","tlWheel","trWheel","blWheel","brWheel","val","drawing","html","css","__decorateClass","property"],"mappings":"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"}