{"version":3,"file":"Mechanism2d.stories-d9526a63.js","sources":["../../src/components/mechanism2d/index.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\r\nimport { svg, css, LitElement, TemplateResult } from 'lit';\r\nimport { property, query, state } from 'lit/decorators.js';\r\nimport { Source } from '@webbitjs/store';\r\n\r\nexport interface Mechanism2dLine {\r\n  angle: number;\r\n  color: string;\r\n  length: number;\r\n  weight: number;\r\n  children: Mechanism2dLine[];\r\n}\r\n\r\nexport interface Mechanism2dRoot {\r\n  x: number;\r\n  y: number;\r\n  children: Mechanism2dLine[];\r\n}\r\n\r\ninterface Mechanism2d {\r\n  backgroundColor: string;\r\n  dims: [number, number];\r\n  roots: Mechanism2dRoot[];\r\n}\r\n\r\nexport function getMechanism2dLines(source: Source): Mechanism2dLine[] {\r\n  const children: Record<string, Source> = source?.getChildren() ?? {};\r\n  const lineSources = Object.values(children).filter(\r\n    (lineSource) =>\r\n      lineSource.hasChildren() &&\r\n      lineSource.getChildren()['.type']?.getSourceValue() === 'line'\r\n  );\r\n  const lines: Mechanism2dLine[] = lineSources.map((lineSource) => {\r\n    const lineChildren = lineSource.getChildren();\r\n    const line: Mechanism2dLine = {\r\n      angle: (lineChildren.angle.getSourceValue() as number) ?? 0,\r\n      color: (lineChildren.color.getSourceValue() as string) ?? '#ffffff',\r\n      length: (lineChildren.length.getSourceValue() as number) ?? 1,\r\n      weight: (lineChildren.weight.getSourceValue() as number) ?? 1,\r\n      children: getMechanism2dLines(lineSource),\r\n    };\r\n    return line;\r\n  });\r\n  return lines;\r\n}\r\n\r\nexport function getMechanism2dRoots(source: Source): Mechanism2dRoot[] {\r\n  const children: Record<string, Source> = source?.getChildren() ?? {};\r\n  const rootSources = Object.values(children).filter((rootSource) =>\r\n    rootSource.hasChildren()\r\n  );\r\n  const roots: Mechanism2dRoot[] = rootSources.map((rootSource) => {\r\n    const root: Mechanism2dRoot = {\r\n      x: (rootSource.getChildren().x.getSourceValue() as number) ?? 0,\r\n      y: (rootSource.getChildren().y.getSourceValue() as number) ?? 0,\r\n      children: getMechanism2dLines(rootSource),\r\n    };\r\n    return root;\r\n  });\r\n  return roots;\r\n}\r\n\r\nexport default class Mechanism2dElement extends LitElement {\r\n  @property({ type: String, attribute: 'background-color' }) backgroundColor =\r\n    '#000020';\r\n  @property({ type: Array }) dims: [number, number] = [3, 3];\r\n  @property({ type: Array }) roots: Mechanism2dRoot[] = [];\r\n\r\n  @query('svg') _svg!: SVGSVGElement;\r\n  @state() mechanism2d: Mechanism2d = this.getMechanism2d();\r\n\r\n  static styles = css`\r\n    :host {\r\n      display: inline-flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      position: relative;\r\n      width: 300px;\r\n      height: 300px;\r\n    }\r\n\r\n    svg {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n  `;\r\n\r\n  firstUpdated(): void {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      this.resized();\r\n    });\r\n    resizeObserver.observe(this);\r\n\r\n    requestAnimationFrame(() => {\r\n      this.updateMechanism2d();\r\n    });\r\n  }\r\n\r\n  getMech2dSize(): [number, number] {\r\n    const { width, height } = this.getBoundingClientRect();\r\n    const [mechWidth, mechHeight] = this.dims;\r\n\r\n    if ((mechHeight / mechWidth) * width < height) {\r\n      return [width, (mechHeight / mechWidth) * width];\r\n    }\r\n    return [(mechWidth / mechHeight) * height, height];\r\n  }\r\n\r\n  resized(): void {\r\n    this.requestUpdate();\r\n  }\r\n\r\n  getSize(): number {\r\n    const { width } = this.getBoundingClientRect();\r\n    return width;\r\n  }\r\n\r\n  updated(changedProps: Map<string, unknown>): void {\r\n    if (changedProps.has('backgroundColor')) {\r\n      this._svg.style.setProperty('background-color', this.backgroundColor);\r\n    }\r\n\r\n    if (changedProps.has('dims')) {\r\n      this.requestUpdate();\r\n    }\r\n  }\r\n\r\n  updateMechanism2d(): void {\r\n    this.mechanism2d = this.getMechanism2d();\r\n    requestAnimationFrame(() => {\r\n      this.updateMechanism2d();\r\n    });\r\n  }\r\n\r\n  getMechanism2d(): Mechanism2d {\r\n    const mech2d: Mechanism2d = {\r\n      backgroundColor: this.backgroundColor,\r\n      dims: this.dims,\r\n      roots: this.roots,\r\n    };\r\n    return mech2d;\r\n  }\r\n\r\n  render(): TemplateResult {\r\n    const [width, height] = this.getMech2dSize();\r\n    return svg`\r\n      <svg\r\n        style=\"width: ${width}px; height: ${height}px; background: ${\r\n      this.mechanism2d.backgroundColor\r\n    }\"\r\n      >\r\n        ${this.mechanism2d.roots.map((root) =>\r\n          this.renderMechanism2dRoot(root)\r\n        )}\r\n      </svg>\r\n    `;\r\n  }\r\n\r\n  renderMechanism2dRoot(root: Mechanism2dRoot): TemplateResult {\r\n    const [width, height] = this.dims;\r\n    const [svgWidth, svgHeight] = this.getMech2dSize();\r\n\r\n    const x = (root.x / width) * svgWidth;\r\n    const y = (root.y / height) * svgHeight;\r\n\r\n    return svg`\r\n      <g style=\"transform: translate(${x}px, ${svgHeight - y}px)\">\r\n        ${root.children.map((line) => this.renderMechanism2dLine(line))}\r\n      </g>\r\n    `;\r\n  }\r\n\r\n  renderMechanism2dLine(line: Mechanism2dLine): TemplateResult {\r\n    const [width] = this.dims;\r\n    const [svgWidth] = this.getMech2dSize();\r\n    const length = (svgWidth / width) * line.length;\r\n    const angleRadians = (line.angle * Math.PI) / 180;\r\n    const x = Math.cos(angleRadians) * length;\r\n    const y = -Math.sin(angleRadians) * length;\r\n    const weight = Math.max(1, (line.weight * 2) / 3);\r\n    return svg`\r\n      <line stroke=${\r\n        line.color\r\n      } stroke-width=${weight} x1=\"0\" y1=\"0\" x2=\"${x}px\" y2=\"${y}px\"  />\r\n      <g style=\"transform: translate(${x}px, ${y}px) rotate(${-line.angle}deg)\">\r\n        ${line.children.map((child) => this.renderMechanism2dLine(child))}\r\n      </g>\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-mechanism2d')) {\r\n  customElements.define('frc-mechanism2d', Mechanism2dElement);\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'frc-mechanism2d': Mechanism2dElement;\r\n  }\r\n}\r\n"],"names":["Mechanism2dElement","LitElement","width","height","mechWidth","mechHeight","changedProps","svg","root","svgWidth","svgHeight","x","y","line","length","angleRadians","weight","child","css","__decorateClass","property","query","state"],"mappings":"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"}