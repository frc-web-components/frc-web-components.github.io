{"version":3,"file":"MecanumDrivebase.stories-37fdfc20.js","sources":["../../src/components/drivebases/mecanum.ts"],"sourcesContent":["import { html, css, LitElement } from 'lit';\r\nimport { property } from 'lit/decorators.js';\r\nimport * as CurvedArrow from './curved-arrow';\r\nimport '../bar';\r\nimport '../axis';\r\n\r\n/**\r\n * Copyright (c) 2017-2018 FIRST\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *     * Redistributions of source code must retain the above copyright\r\n *       notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above copyright\r\n *       notice, this list of conditions and the following disclaimer in the\r\n *       documentation and/or other materials provided with the distribution.\r\n *     * Neither the name of FIRST nor the\r\n *       names of its contributors may be used to endorse or promote products\r\n *       derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY FIRST AND CONTRIBUTORS \"AS IS\" AND ANY\r\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY NONINFRINGEMENT AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FIRST OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nfunction generateX(width: number) {\r\n  const halfW = width / 2;\r\n  const lineA = `\r\n    <line \r\n      x1=\"${-halfW}\"\r\n      y1=\"${-halfW}\"\r\n      x2=\"${halfW}\"\r\n      y2=\"${halfW}\"\r\n    />\r\n  `;\r\n\r\n  const lineB = `\r\n    <line \r\n      x1=\"${-halfW}\"\r\n      y1=\"${halfW}\"\r\n      x2=\"${halfW}\"\r\n      y2=\"${-halfW}\"\r\n    />\r\n  `;\r\n\r\n  return `<g class=\"x\">${lineA} ${lineB}</g>`;\r\n}\r\n\r\nfunction clamp(value: number) {\r\n  return Math.min(1, Math.max(value, -1));\r\n}\r\n\r\nfunction getForegroundStyle(value: number) {\r\n  const min = -1;\r\n  const max = 1;\r\n  const val = clamp(value);\r\n\r\n  if (val > 0) {\r\n    return `\r\n      height: ${(Math.abs(val) / (max - min)) * 100}%;\r\n      top: auto;\r\n      bottom: 50%;\r\n    `;\r\n  }\r\n  return `\r\n    height: ${(Math.abs(val) / (max - min)) * 100}%;\r\n    top: 50%;\r\n    bottom: auto;\r\n  `;\r\n}\r\n\r\nexport default class MecanumDrivebase extends LitElement {\r\n  @property({ type: Number, attribute: 'front-left-motor-speed' })\r\n  frontLeftMotorSpeed = 0;\r\n  @property({ type: Number, attribute: 'front-right-motor-speed' })\r\n  frontRightMotorSpeed = 0;\r\n  @property({ type: Number, attribute: 'rear-left-motor-speed' })\r\n  rearLeftMotorSpeed = 0;\r\n  @property({ type: Number, attribute: 'rear-right-motor-speed' })\r\n  rearRightMotorSpeed = 0;\r\n\r\n  static styles = css`\r\n    :host {\r\n      display: inline-block;\r\n      width: 400px;\r\n      height: 300px;\r\n      padding: 0 10px;\r\n      font-family: sans-serif;\r\n    }\r\n\r\n    .diff-drive-container {\r\n      height: 100%;\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    svg {\r\n      overflow: overlay;\r\n      flex: 1;\r\n      height: 100%;\r\n    }\r\n\r\n    svg .x {\r\n      stroke: rgb(50, 50, 255);\r\n      stroke-width: 2;\r\n    }\r\n\r\n    svg .arrow line,\r\n    svg .arrow path {\r\n      stroke: rgb(50, 50, 255);\r\n      stroke-width: 2;\r\n      fill: none;\r\n    }\r\n\r\n    svg .arrow polygon {\r\n      stroke: rgb(50, 50, 255);\r\n      fill: rgb(50, 50, 255);\r\n    }\r\n\r\n    svg .drivetrain {\r\n      fill: none;\r\n      stroke: var(--frc-mecanum-drivebase-drivetrain-color, #000);\r\n    }\r\n\r\n    .bar {\r\n      position: relative;\r\n      height: calc(100% - 30px);\r\n      width: 20px;\r\n      border-radius: 3px;\r\n      margin: 15px 0;\r\n      background: var(--frc-bar-background, #ddd);\r\n    }\r\n\r\n    .speed-pair {\r\n      height: 100%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: space-around;\r\n    }\r\n\r\n    .speed {\r\n      display: flex;\r\n      height: 48%;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      margin-left: 30px;\r\n    }\r\n\r\n    frc-axis {\r\n      width: 10px;\r\n      height: calc(100% - 35px);\r\n    }\r\n\r\n    .foreground {\r\n      position: absolute;\r\n      top: 0;\r\n      width: 20px;\r\n      background: var(--frc-bar-foreground, lightblue);\r\n      border-radius: 3px;\r\n    }\r\n  `;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      this.resized();\r\n    });\r\n    resizeObserver.observe(this);\r\n  }\r\n\r\n  drawMotionVector(fl: number, fr: number, rl: number, rr: number) {\r\n    const svgNode = this.renderRoot.querySelector('#svg')!;\r\n    const rect = svgNode.getBoundingClientRect();\r\n\r\n    const wheelWidth = rect.width * 0.13;\r\n    const padding = 20;\r\n    const verticalPadding = 20;\r\n\r\n    const FRAME_WIDTH = rect.width - (wheelWidth + padding) * 2;\r\n    const FRAME_HEIGHT = rect.height - verticalPadding * 2;\r\n\r\n    const vectorRadius = Math.min(FRAME_WIDTH, FRAME_HEIGHT) / 2 - 16;\r\n    const direction = {\r\n      x: (fl - fr - rl + rr) / 4,\r\n      y: (fl + fr + rl + rr) / 4,\r\n    };\r\n    const moment = (-fl + fr - rl + rr) / 4;\r\n    const directionMagnitude = Math.hypot(direction.x, direction.y);\r\n    const directionAngle = Math.atan2(direction.y, direction.x);\r\n\r\n    // Barely moving, draw an X\r\n    if (Math.abs(moment) <= 0.01 && directionMagnitude <= 0.01) {\r\n      return generateX(rect.width * 0.2);\r\n    }\r\n\r\n    let rightMomentArrow = '';\r\n    let leftMomentArrow = '';\r\n    let directionArrow = '';\r\n\r\n    if (Math.abs(moment) > 0.01) {\r\n      // Only draw the moment vectors if the moment is significant enough\r\n      rightMomentArrow = CurvedArrow.createPolar(\r\n        0,\r\n        vectorRadius,\r\n        -moment * Math.PI,\r\n        0,\r\n        8\r\n      );\r\n      leftMomentArrow = CurvedArrow.createPolar(\r\n        Math.PI,\r\n        vectorRadius,\r\n        -moment * Math.PI,\r\n        0,\r\n        8\r\n      );\r\n    }\r\n    if (directionMagnitude > 0.01) {\r\n      // Only draw the direction vector if it'd be long enough\r\n      directionArrow = CurvedArrow.createStraight(\r\n        directionMagnitude * vectorRadius,\r\n        -directionAngle,\r\n        0,\r\n        8\r\n      );\r\n    }\r\n\r\n    return `<g class=\"arrow\">${rightMomentArrow} ${leftMomentArrow} ${directionArrow}</g>`;\r\n  }\r\n\r\n  drawDrivetrain() {\r\n    const svgNode = this.renderRoot.querySelector('#svg')!;\r\n    const rect = svgNode.getBoundingClientRect();\r\n\r\n    const wheelWidth = rect.width * 0.13;\r\n    const wheelRadius = Math.min(rect.width * 0.13, rect.height * 0.15);\r\n    const padding = 20;\r\n    const verticalPadding = 20;\r\n\r\n    const base = `\r\n      <rect \r\n        width=\"calc(100% - ${(wheelWidth + padding) * 2}px)\" \r\n        height=\"calc(100% - ${verticalPadding * 2}px)\"\r\n        x=\"${wheelWidth + padding}\" \r\n        y=\"20px\" \r\n      />\r\n    `;\r\n\r\n    const tlWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"${padding}px\" \r\n        y=\"${verticalPadding}px\" \r\n      />\r\n    `;\r\n\r\n    const trWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"calc(100% - ${wheelWidth + padding}px)\" \r\n        y=\"${verticalPadding}px\" \r\n      />\r\n    `;\r\n\r\n    const blWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"${padding}px\"\r\n        y=\"calc(100% - ${wheelRadius * 2 + verticalPadding}px)\"\r\n      />\r\n    `;\r\n\r\n    const brWheel = `\r\n      <rect \r\n        width=\"${wheelWidth}px\" \r\n        height=\"${wheelRadius * 2}\" \r\n        x=\"calc(100% - ${wheelWidth + padding}px)\" \r\n        y=\"calc(100% - ${wheelRadius * 2 + verticalPadding}px)\"\r\n      />\r\n    `;\r\n\r\n    return base + tlWheel + trWheel + blWheel + brWheel;\r\n  }\r\n\r\n  getFlForegroundStyle() {\r\n    return getForegroundStyle(this.frontLeftMotorSpeed);\r\n  }\r\n\r\n  getFrForegroundStyle() {\r\n    return getForegroundStyle(this.frontRightMotorSpeed);\r\n  }\r\n\r\n  getRlForegroundStyle() {\r\n    return getForegroundStyle(this.rearLeftMotorSpeed);\r\n  }\r\n\r\n  getRrForegroundStyle() {\r\n    return getForegroundStyle(this.rearRightMotorSpeed);\r\n  }\r\n\r\n  firstUpdated() {\r\n    const drawing = this.drawMotionVector(0, 0, 0, 0);\r\n    this.renderRoot.querySelector('#drivetrain')!.innerHTML =\r\n      this.drawDrivetrain();\r\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\r\n  }\r\n\r\n  resized() {\r\n    const drawing = this.drawMotionVector(\r\n      clamp(this.frontLeftMotorSpeed),\r\n      clamp(this.frontRightMotorSpeed),\r\n      clamp(this.rearLeftMotorSpeed),\r\n      clamp(this.rearRightMotorSpeed)\r\n    );\r\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\r\n    const svgNode = this.renderRoot.querySelector('#svg')!;\r\n    const rect = svgNode.getBoundingClientRect();\r\n    (\r\n      this.renderRoot.querySelector('#forceVector')! as HTMLElement\r\n    ).style.transform = `translate(${rect.width * 0.5}px, ${\r\n      rect.height * 0.5\r\n    }px)`;\r\n    this.renderRoot.querySelector('#drivetrain')!.innerHTML =\r\n      this.drawDrivetrain();\r\n  }\r\n\r\n  updated(changedProps: Map<string, unknown>) {\r\n    super.updated(changedProps);\r\n    const drawing = this.drawMotionVector(\r\n      clamp(this.frontLeftMotorSpeed),\r\n      clamp(this.frontRightMotorSpeed),\r\n      clamp(this.rearLeftMotorSpeed),\r\n      clamp(this.rearRightMotorSpeed)\r\n    );\r\n    this.renderRoot.querySelector('#forceVector')!.innerHTML = drawing;\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n      <div class=\"diff-drive-container\">\r\n        <div class=\"speed-pair\">\r\n          <div class=\"speed\">\r\n            <frc-axis ticks=\"5\" vertical min=\"1\" max=\"-1\"></frc-axis>\r\n            <div class=\"bar\">\r\n              <div\r\n                class=\"foreground\"\r\n                style=\"${this.getFlForegroundStyle()}\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"speed\">\r\n            <frc-axis ticks=\"5\" vertical min=\"1\" max=\"-1\"></frc-axis>\r\n            <div class=\"bar\">\r\n              <div\r\n                class=\"foreground\"\r\n                style=\"${this.getRlForegroundStyle()}\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <svg id=\"svg\">\r\n          <g id=\"forceVector\"></g>\r\n          <g id=\"drivetrain\" class=\"drivetrain\"></g>\r\n        </svg>\r\n        <div class=\"speed-pair\">\r\n          <div class=\"speed\">\r\n            <frc-axis ticks=\"5\" vertical min=\"1\" max=\"-1\"></frc-axis>\r\n            <div class=\"bar\">\r\n              <div\r\n                class=\"foreground\"\r\n                style=\"${this.getFrForegroundStyle()}\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"speed\">\r\n            <frc-axis ticks=\"5\" vertical min=\"1\" max=\"-1\"></frc-axis>\r\n            <div class=\"bar\">\r\n              <div\r\n                class=\"foreground\"\r\n                style=\"${this.getRrForegroundStyle()}\"\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-mecanum-drivebase')) {\r\n  customElements.define('frc-mecanum-drivebase', MecanumDrivebase);\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'frc-mecanum-drivebase': MecanumDrivebase;\r\n  }\r\n}\r\n"],"names":["generateX","width","halfW","lineA","lineB","clamp","value","getForegroundStyle","val","MecanumDrivebase","LitElement","fl","fr","rl","rr","rect","wheelWidth","padding","verticalPadding","FRAME_WIDTH","FRAME_HEIGHT","vectorRadius","direction","moment","directionMagnitude","directionAngle","rightMomentArrow","leftMomentArrow","directionArrow","CurvedArrow.createPolar","CurvedArrow.createStraight","wheelRadius","base","tlWheel","trWheel","blWheel","brWheel","drawing","changedProps","html","css","__decorateClass","property"],"mappings":"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"}