{"version":3,"file":"Field.stories-b30073b0.js","sources":["../../src/elements/base/field/field-configs.ts","../../src/elements/base/field/field-images.ts","../../src/elements/base/field/field-robot.ts","../../src/elements/base/field/field.ts"],"sourcesContent":["export interface FieldConfig {\r\n  game: string;\r\n  image: string;\r\n  corners: {\r\n    topLeft: [number, number];\r\n    bottomRight: [number, number];\r\n  };\r\n  size: [number, number];\r\n  unit: string;\r\n}\r\n\r\nconst configs: FieldConfig[] = [\r\n  {\r\n    game: 'Charged Up',\r\n    image: '/field-images/2023-field.jpg',\r\n    corners: {\r\n      topLeft: [46, 36],\r\n      bottomRight: [1088, 544],\r\n    },\r\n    size: [54.27083, 26.2916],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'Rapid React',\r\n    image: '/field-images/2022-field.jpg',\r\n    corners: {\r\n      topLeft: [74, 50],\r\n      bottomRight: [1774, 900],\r\n    },\r\n    size: [54, 27],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'Infinite Recharge',\r\n    image: '/field-images/2020-field.jpg',\r\n    corners: {\r\n      topLeft: [96, 25],\r\n      bottomRight: [1040, 514],\r\n    },\r\n    size: [52.4375, 26.9375],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'Destination: Deep Space',\r\n    image: '/field-images/2019-field.jpg',\r\n    corners: {\r\n      topLeft: [217, 40],\r\n      bottomRight: [1372, 615],\r\n    },\r\n    size: [54, 27],\r\n    unit: 'foot',\r\n  },\r\n  {\r\n    game: 'FIRST Power Up',\r\n    image: '/field-images/2018-field.jpg',\r\n    corners: {\r\n      topLeft: [125, 20],\r\n      bottomRight: [827, 370],\r\n    },\r\n    size: [54, 27],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Barrel Racing Path',\r\n    image: '/field-images/2021-barrel.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Bounce Path',\r\n    image: '/field-images/2021-bounce.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Galactic Search A',\r\n    image: '/field-images/2021-galacticsearcha.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Galactic Search B',\r\n    image: '/field-images/2021-galacticsearchb.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n  {\r\n    game: 'Slalom Path',\r\n    image: '/field-images/2021-slalom.png',\r\n    corners: {\r\n      topLeft: [20, 20],\r\n      bottomRight: [780, 400],\r\n    },\r\n    size: [30, 15],\r\n    unit: 'feet',\r\n  },\r\n];\r\n\r\nexport default configs;\r\n","type Dims = { width: number; height: number };\r\n\r\nexport interface ImageObject extends Dims {\r\n  src: string;\r\n  loaded: boolean;\r\n  image: HTMLImageElement;\r\n}\r\n\r\nexport default class FieldImages {\r\n  #images: Record<string, ImageObject> = {};\r\n  #onImageLoadCallbacks: Map<symbol, (src: string) => unknown> = new Map();\r\n\r\n  getImage(src: string): ImageObject {\r\n    if (typeof this.#images[src] === 'undefined') {\r\n      const image = new Image();\r\n      const imageObject = {\r\n        src,\r\n        width: 0,\r\n        height: 0,\r\n        loaded: false,\r\n        image,\r\n      };\r\n      image.onload = () => {\r\n        imageObject.loaded = true;\r\n        imageObject.width = image.width;\r\n        imageObject.height = image.height;\r\n        [...this.#onImageLoadCallbacks.values()].forEach((callback) => {\r\n          console.log('on load', callback);\r\n          callback(src);\r\n        });\r\n      };\r\n      this.#images[src] = imageObject;\r\n      image.src = src;\r\n    }\r\n    return this.#images[src];\r\n  }\r\n\r\n  static getBoundingBoxDims(image: Dims, rotationRadians: number): Dims {\r\n    const boundingBoxWidth =\r\n      Math.abs(image.width * Math.cos(rotationRadians)) +\r\n      Math.abs(image.height * Math.sin(rotationRadians));\r\n    const boundingBoxHeight =\r\n      Math.abs(image.width * Math.sin(rotationRadians)) +\r\n      Math.abs(image.height * Math.cos(rotationRadians));\r\n\r\n    return {\r\n      width: boundingBoxWidth,\r\n      height: boundingBoxHeight,\r\n    };\r\n  }\r\n\r\n  static fitImageInsideBox(image: Dims, boundingBox: Dims): Dims {\r\n    if (\r\n      (boundingBox.width / image.width) * image.height <=\r\n      boundingBox.height\r\n    ) {\r\n      return {\r\n        width: boundingBox.width,\r\n        height: (boundingBox.width / image.width) * image.height,\r\n      };\r\n    }\r\n    return {\r\n      width: (boundingBox.height / image.height) * image.width,\r\n      height: boundingBox.height,\r\n    };\r\n  }\r\n\r\n  onImageLoad(callback: (src: string) => unknown): () => void {\r\n    const uniqueId = Symbol('image');\r\n    this.#onImageLoadCallbacks.set(uniqueId, callback);\r\n    return () => {\r\n      this.#onImageLoadCallbacks.delete(uniqueId);\r\n    };\r\n  }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { property } from 'lit/decorators.js';\r\nimport { LitElement } from 'lit';\r\nimport { FieldObjectApi } from './field-interfaces';\r\n\r\nexport default class FieldRobot extends LitElement {\r\n  @property({ type: String }) unit = 'inherit';\r\n  @property({ type: String }) image = '';\r\n  @property({ type: String }) color = '#0000ff';\r\n  @property({ type: Number }) opacity = 1;\r\n  @property({ type: Array }) pose = [0, 0, 0];\r\n  @property({ type: Number }) width = 0.6;\r\n  @property({ type: Number }) length = 0.9;\r\n\r\n  draw({\r\n    canvas,\r\n    unit: parentUnit,\r\n    xToPx,\r\n    yToPx,\r\n    lengthToPx,\r\n    flipSide,\r\n  }: FieldObjectApi): void {\r\n    const unit = this.unit === 'inherit' ? parentUnit : this.unit;\r\n    const [x, y, angle] = this.pose;\r\n\r\n    canvas.globalAlpha = Math.max(0, Math.min(1, this.opacity));\r\n    canvas.fillStyle = '#222';\r\n    canvas.strokeStyle = this.color;\r\n    canvas.lineWidth = lengthToPx(3, 'in');\r\n\r\n    canvas.translate(\r\n      // xToPx(x - this.height / 2, unit),\r\n      // yToPx(y + this.width / 2, unit)\r\n      xToPx(x, unit),\r\n      yToPx(y, unit)\r\n    );\r\n    canvas.rotate(-angle + (flipSide ? Math.PI : 0));\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    canvas.roundRect(\r\n      -lengthToPx(this.length / 2, unit),\r\n      -lengthToPx(this.width / 2, unit),\r\n      lengthToPx(this.length, unit),\r\n      lengthToPx(this.width, unit),\r\n      1\r\n    );\r\n    canvas.fill();\r\n    canvas.stroke();\r\n\r\n    // draw arrow\r\n    canvas.beginPath();\r\n    canvas.fillStyle = 'white';\r\n    canvas.strokeStyle = 'white';\r\n    canvas.lineWidth = lengthToPx(2, 'in');\r\n\r\n    canvas.moveTo(-lengthToPx(this.length * 0.3, unit), 0);\r\n    canvas.lineTo(lengthToPx(this.length * 0.3, unit), 0);\r\n\r\n    canvas.moveTo(\r\n      lengthToPx(this.length * 0.1, unit),\r\n      -lengthToPx(this.width * 0.25, unit)\r\n    );\r\n    canvas.lineTo(lengthToPx(this.length * 0.3, unit), 0);\r\n    canvas.lineTo(\r\n      lengthToPx(this.length * 0.1, unit),\r\n      lengthToPx(this.width * 0.25, unit)\r\n    );\r\n\r\n    canvas.stroke();\r\n  }\r\n}\r\n\r\nif (!customElements.get('frc-field-robot')) {\r\n  customElements.define('frc-field-robot', FieldRobot);\r\n}\r\n","import { property, query } from 'lit/decorators.js';\nimport { html, css, LitElement, TemplateResult } from 'lit';\nimport fieldConfigs, { FieldConfig } from './field-configs';\nimport { baseUnit, convert } from './units';\nimport FieldImages from './field-images';\nimport './field-robot';\nimport { CropType, FieldObjectApi, FieldObject } from './field-interfaces';\n\nfunction toRadians(degrees: number): number {\n  return (degrees * Math.PI) / 180;\n}\n\nexport default class Field extends LitElement {\n  @property({ type: String }) game = fieldConfigs[0].game;\n  @property({ type: Number, attribute: 'crop-top' }) cropTop: number | null =\n    null;\n  @property({ type: Number, attribute: 'crop-bottom' }) cropBottom:\n    | number\n    | null = null;\n  @property({ type: Number, attribute: 'crop-left' }) cropLeft: number | null =\n    null;\n  @property({ type: Number, attribute: 'crop-right' }) cropRight:\n    | number\n    | null = null;\n  @property({ type: String, attribute: 'crop-type' }) cropType: CropType =\n    'percent';\n  @property({ type: String }) unit = baseUnit;\n  @property({ type: Number }) rotation = 0;\n  @property({ type: Boolean, attribute: 'show-grid' }) showGrid = false;\n  @property({ type: Number, attribute: 'grid-size' }) gridSize = 1;\n  @property({ type: Boolean, attribute: 'flip-side' }) flipSide = false;\n\n  @query('canvas', true)\n  canvas!: HTMLCanvasElement;\n  @query('.container', true) container!: HTMLElement;\n\n  #fieldImages: FieldImages = new FieldImages();\n\n  static styles = css`\n    :host {\n      display: inline-flex;\n      width: 500px;\n      height: 300px;\n      justify-content: center;\n      align-items: center;\n    }\n\n    .container {\n    }\n\n    canvas {\n      width: 100%;\n      height: 100%;\n    }\n  `;\n\n  getConfig(): FieldConfig {\n    const config = fieldConfigs.find(({ game }) => game === this.game);\n    return config ?? fieldConfigs[0];\n  }\n\n  getCanvasCtx(): CanvasRenderingContext2D {\n    const ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n    return ctx;\n  }\n\n  getCropPercent(): { x1: number; y1: number; x2: number; y2: number } {\n    if (this.cropType === 'percent') {\n      const x1 = this.cropLeft ?? 0;\n      const y1 = this.cropTop ?? 0;\n      const x2 = this.cropRight ?? 1;\n      const y2 = this.cropBottom ?? 1;\n      return { x1, y1, x2, y2 };\n    }\n\n    const { corners, image, unit, size } = this.getConfig();\n    const { loaded, width, height } = this.#fieldImages.getImage(image);\n\n    if (!loaded) {\n      return { x1: 0, y1: 0, x2: 1, y2: 1 };\n    }\n\n    const topLeftCrop = [this.cropLeft ?? 0, this.cropTop ?? 0];\n    const bottomRightCrop = [\n      this.cropRight ?? convert(size[0], unit, this.unit),\n      this.cropBottom ?? convert(size[1], unit, this.unit),\n    ];\n\n    const x1Corner = corners.topLeft[0] / width;\n    const y1Corner = corners.topLeft[1] / height;\n    const x2Corner = corners.bottomRight[0] / width;\n    const y2Corner = corners.bottomRight[1] / height;\n\n    const widthPercent = x2Corner - x1Corner;\n    const heightPercent = y2Corner - y1Corner;\n\n    const value = {\n      x1:\n        x1Corner +\n        (widthPercent * convert(topLeftCrop[0], this.unit, unit)) / size[0],\n      y1:\n        y1Corner +\n        (heightPercent * convert(topLeftCrop[1], this.unit, unit)) / size[1],\n      x2:\n        x1Corner +\n        (widthPercent * convert(bottomRightCrop[0], this.unit, unit)) / size[0],\n      y2:\n        y1Corner +\n        (heightPercent * convert(bottomRightCrop[1], this.unit, unit)) /\n          size[1],\n    };\n\n    return value;\n  }\n\n  getFieldRectPx(): { x: number; y: number; width: number; height: number } {\n    const { corners, image } = this.getConfig();\n    const { loaded, width, height } = this.#fieldImages.getImage(image);\n\n    if (!loaded) {\n      return { x: 0, y: 0, width: 0, height: 0 };\n    }\n\n    const x1Percent = corners.topLeft[0] / width;\n    const y1Percent = corners.topLeft[1] / height;\n    const x2Percent = corners.bottomRight[0] / width;\n    const y2Percent = corners.bottomRight[1] / height;\n\n    const cropPercent = this.getCropPercent();\n    const cropWidthPercent = cropPercent.x2 - cropPercent.x1;\n    const cropHeightPercent = cropPercent.y2 - cropPercent.y1;\n    const originalWidth = this.canvas.width / cropWidthPercent;\n    const originalHeight = this.canvas.height / cropHeightPercent;\n\n    return {\n      x: (x1Percent - cropPercent.x1) * originalWidth,\n      y: (y1Percent - cropPercent.y1) * originalHeight,\n      width: (x2Percent - x1Percent) * originalWidth,\n      height: (y2Percent - y1Percent) * originalHeight,\n    };\n  }\n\n  xToPx(xUnits: number, unit: string = this.unit): number {\n    const fieldRectPx = this.getFieldRectPx();\n    const { size, unit: configUnit } = this.getConfig();\n\n    if (fieldRectPx.width === 0) {\n      return 0;\n    }\n\n    const pxPerUnit = fieldRectPx.width / size[0];\n    const xValue = convert(xUnits, unit, configUnit);\n    return !this.flipSide\n      ? fieldRectPx.x + xValue * pxPerUnit\n      : fieldRectPx.x + fieldRectPx.width - xValue * pxPerUnit;\n  }\n\n  yToPx(yUnits: number, unit: string = this.unit): number {\n    const fieldRectPx = this.getFieldRectPx();\n    const { size, unit: configUnit } = this.getConfig();\n\n    if (fieldRectPx.height === 0) {\n      return 0;\n    }\n\n    const pxPerUnit = fieldRectPx.height / size[1];\n    const yValue = convert(yUnits, unit, configUnit);\n    return !this.flipSide\n      ? fieldRectPx.y + fieldRectPx.height - yValue * pxPerUnit\n      : fieldRectPx.y + yValue * pxPerUnit;\n  }\n\n  lengthToPx(length: number, unit: string = this.unit): number {\n    const fieldRectPx = this.getFieldRectPx();\n    const { size, unit: configUnit } = this.getConfig();\n\n    if (fieldRectPx.width === 0) {\n      return 0;\n    }\n\n    const pxPerUnit = fieldRectPx.width / size[0];\n    const lengthConverted = convert(length, unit, configUnit);\n    return lengthConverted * pxPerUnit;\n  }\n\n  setContainerSize(): void {\n    const rect = { width: this.clientWidth, height: this.clientHeight };\n    const src = this.getConfig().image;\n    const imageObject = this.#fieldImages.getImage(src);\n    const { loaded } = imageObject;\n\n    if (!loaded) {\n      return;\n    }\n\n    const cropPercent = this.getCropPercent();\n\n    const imageDims = {\n      width: (cropPercent.x2 - cropPercent.x1) * imageObject.width,\n      height: (cropPercent.y2 - cropPercent.y1) * imageObject.height,\n    };\n\n    const boundingBoxDims = FieldImages.getBoundingBoxDims(\n      imageDims,\n      toRadians(this.rotation)\n    );\n    const dims = FieldImages.fitImageInsideBox(boundingBoxDims, {\n      width: rect.width,\n      height: rect.height,\n    });\n    const scale = dims.width / boundingBoxDims.width;\n    this.container.style.width = `${imageDims.width * scale}px`;\n    this.container.style.height = `${imageDims.height * scale}px`;\n  }\n\n  drawImage(): void {\n    const ctx = this.getCanvasCtx();\n    const src = this.getConfig().image;\n    const { loaded, image, width, height } = this.#fieldImages.getImage(src);\n    if (!loaded) {\n      return;\n    }\n    const { clientWidth, clientHeight } = this.canvas;\n    const canvasWidth = clientWidth * window.devicePixelRatio;\n    const canvasHeight = clientHeight * window.devicePixelRatio;\n    this.canvas.width = canvasWidth;\n    this.canvas.height = canvasHeight;\n    const cropPercent = this.getCropPercent();\n\n    ctx.drawImage(\n      image,\n      cropPercent.x1 * width,\n      cropPercent.y1 * height,\n      (cropPercent.x2 - cropPercent.x1) * width,\n      (cropPercent.y2 - cropPercent.y1) * height,\n      0,\n      0,\n      canvasWidth,\n      canvasHeight\n    );\n  }\n\n  drawFieldRect(): void {\n    const ctx = this.getCanvasCtx();\n    const { x, y, width, height } = this.getFieldRectPx();\n    ctx.rect(x, y, width, height);\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'yellow';\n    ctx.stroke();\n  }\n\n  drawGrid(): void {\n    const ctx = this.getCanvasCtx();\n    const { image, size } = this.getConfig();\n    const { loaded } = this.#fieldImages.getImage(image);\n\n    if (!loaded || !this.showGrid || this.gridSize <= 0) {\n      return;\n    }\n\n    // Set the stroke width and color\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = 'gray';\n\n    for (let x = 0; x <= size[0]; x += this.gridSize) {\n      ctx.beginPath();\n      ctx.moveTo(this.xToPx(x), this.yToPx(0));\n      ctx.lineTo(this.xToPx(x), this.yToPx(size[1]));\n      ctx.stroke();\n    }\n\n    for (let y = 0; y <= size[1]; y += this.gridSize) {\n      ctx.beginPath();\n      ctx.moveTo(this.xToPx(0), this.yToPx(y));\n      ctx.lineTo(this.xToPx(size[0]), this.yToPx(y));\n      ctx.stroke();\n    }\n  }\n\n  drawChildren(): void {\n    const ctx = this.getCanvasCtx();\n    ctx.save();\n    ctx.beginPath();\n\n    const api: FieldObjectApi = {\n      canvas: this.getCanvasCtx(),\n      getFieldRectPx: () => this.getFieldRectPx(),\n      unit: this.unit,\n      xToPx: (xUnits, unit) => this.xToPx(xUnits, unit),\n      yToPx: (yUnits, unit) => this.yToPx(yUnits, unit),\n      lengthToPx: (length, unit) => this.lengthToPx(length, unit),\n      flipSide: this.flipSide,\n    };\n\n    [...this.children].forEach((child) => {\n      const fieldObject = child as any as FieldObject;\n      fieldObject.draw?.(api);\n    });\n\n    ctx.restore();\n  }\n\n  drawField(): void {\n    this.setContainerSize();\n    this.drawImage();\n    this.drawFieldRect();\n    this.drawGrid();\n    this.drawChildren();\n\n    window.requestAnimationFrame(() => {\n      this.drawField();\n    });\n  }\n\n  firstUpdated(): void {\n    this.drawField();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  render(): TemplateResult {\n    return html`\n      <div class=\"container\" style=\"transform: rotate(${-this.rotation}deg)\">\n        <canvas></canvas>\n      </div>\n    `;\n  }\n}\n\nif (!customElements.get('frc-field')) {\n  customElements.define('frc-field', Field);\n}\n"],"names":["configs","fieldConfigs","FieldImages","__privateAdd","_images","_onImageLoadCallbacks","src","__privateGet","image","imageObject","callback","rotationRadians","boundingBoxWidth","boundingBoxHeight","boundingBox","uniqueId","FieldRobot","LitElement","canvas","parentUnit","xToPx","yToPx","lengthToPx","flipSide","unit","x","y","angle","__decorateClass","property","_fieldImages","toRadians","degrees","baseUnit","game","x1","y1","x2","y2","corners","size","loaded","width","height","topLeftCrop","bottomRightCrop","convert","x1Corner","y1Corner","x2Corner","y2Corner","widthPercent","heightPercent","x1Percent","y1Percent","x2Percent","y2Percent","cropPercent","cropWidthPercent","cropHeightPercent","originalWidth","originalHeight","xUnits","fieldRectPx","configUnit","pxPerUnit","xValue","yUnits","yValue","length","rect","imageDims","boundingBoxDims","scale","ctx","clientWidth","clientHeight","canvasWidth","canvasHeight","api","child","fieldObject","_a","html","Field","css","query"],"mappings":"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"}